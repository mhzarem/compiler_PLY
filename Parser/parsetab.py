
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOROR_ELSEleftANDAND_THENleftEQleftLTGTLEGEleftPLUSMINUSleftREMleftMULTDIVrightNOTnonassocELSE_KWnonassocIDAND AND_THEN BOOL_CONSTANT BOOL_KW BREAK_KW CALLOUT_KW CASE_KW CHAR_CONSTANT CHAR_KW CLOSING_BRACE CLOSING_BRACKET CLOSING_PARENTHESES COLON COMMA CONTINUE_KW DEFAULT_KW DIV ELSE_KW EQ ERROR EXP FLOAT_CONSTANT FLOAT_KW FOR_KW GE GT ID IF_KW INT_CONSTANT INT_KW LE LT MINUS MULT NE NOT OPENING_BRACE OPENING_BRACKET OPENING_PARENTHESES OR OR_ELSE PLUS PROGRAM_KW READ_KW REM RETURN_KW SEMICOLON SHL SHR STRING_CONSTANT SWITCH_KW THEN_KW VOID_KW WHILE_KW WRITE_KWprogram : PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE field_decl_list : field_decl field_decl_list\n                            |\n         field_decl : type field_name_list SEMICOLONfield_name_list : field_name COMMA field_name_list\n                            | field_name\n        field_name : ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET\n                        | ID\n        method_decl_list : method_decl method_decl_list\n                            |\n        method_decl : return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES blockmethod_call : ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES\n                        | CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES actual_parameters : actual_parameter_list\n                            |\n         actual_parameter_list : expr COMMA actual_parameter_list\n                                | expr\n        callout_parameters : COMMA callout_parameter_list\n                                | expr\n        callout_parameter_list : expr COMMA callout_parameter_list\n                                | expr\n        formal_parameter_list : argumant_list\n                                |\n        argumant_list : type ID COMMA argumant_list\n                        | type ID\n        type : INT_KW\n                | FLOAT_KW\n                | CHAR_KW\n                | BOOL_KW\n        constant : INT_CONSTANT\n        | FLOAT_CONSTANT\n        | CHAR_CONSTANT\n        | BOOL_CONSTANT\n        return_type : type\n                    | VOID_KW\n        return_expr : expr\n                        |\n        block : OPENING_BRACE var_decl_list statement_list CLOSING_BRACE var_decl_list : var_decl var_decl_list\n                        |\n        var_decl : type id_list SEMICOLONid_list : ID COMMA id_list\n                    | ID\n        statement_list : statement statement_list\n                            |\n        statement : assignment SEMICOLON\n        | method_call SEMICOLON\n        | IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON\n        | IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON\n        | WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON\n        | FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON\n        | SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON\n        | RETURN_KW return_expr SEMICOLON\n        | BREAK_KW SEMICOLON\n        | CONTINUE_KW SEMICOLON\n        | block\n        | READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON\n        | WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON\n        | SEMICOLON\n        case_statements : CASE_KW constant COLON statement case_statements\n                        | DEFAULT_KW COLON statement\n                        |\n        write_parameter : expr\n                        | STRING_CONSTANT\n        assignment : location EXP expr\n                        | location\n        for_initialize : assignment\n                        |\n        location : ID\n                    | ID OPENING_BRACKET expr CLOSING_BRACKETexpr : location\n                | constant\n                | OPENING_PARENTHESES expr CLOSING_PARENTHESES\n                | method_call\n                | operational_expr\n        operational_expr : expr LT expr\n        | expr LE expr\n        | expr GT expr\n        | expr GE expr\n        | expr EQ expr\n        | expr NE expr\n        | expr AND expr\n        | expr OR expr\n        | expr AND_THEN expr\n        | expr OR_ELSE expr\n        | expr PLUS expr\n        | expr MINUS expr\n        | expr DIV expr\n        | expr REM expr\n        | SHR expr\n        | SHL expr\n        | MINUS expr\n        | NOT expr\n        '
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,21,],[0,-1,]),'ID':([2,7,8,9,10,11,14,15,16,25,32,37,39,40,41,44,46,49,54,61,64,66,67,68,69,70,71,72,73,78,86,87,88,89,90,91,92,93,94,96,97,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,167,168,173,174,178,179,184,188,189,191,194,],[3,20,-26,-27,-28,-29,23,-34,-35,20,35,-40,53,-40,63,53,-59,-56,81,-39,-38,-46,-47,81,81,102,103,81,81,81,81,81,81,81,-54,-55,128,81,81,-41,63,-53,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-57,-58,-50,102,81,-48,53,-52,53,-49,-51,]),'OPENING_BRACE':([3,34,37,39,40,44,46,49,61,64,66,67,90,91,96,108,136,138,162,167,168,173,179,180,184,187,188,189,191,194,],[4,37,-40,37,-40,37,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,37,165,37,-57,-58,-50,-48,37,37,37,-52,37,-49,-51,]),'VOID_KW':([4,5,6,13,17,24,36,64,],[-3,16,-3,16,-2,-4,-11,-38,]),'INT_KW':([4,5,6,13,17,24,27,36,37,38,40,64,96,],[8,8,8,8,-2,-4,8,-11,8,8,8,-38,-41,]),'FLOAT_KW':([4,5,6,13,17,24,27,36,37,38,40,64,96,],[9,9,9,9,-2,-4,9,-11,9,9,9,-38,-41,]),'CHAR_KW':([4,5,6,13,17,24,27,36,37,38,40,64,96,],[10,10,10,10,-2,-4,10,-11,10,10,10,-38,-41,]),'BOOL_KW':([4,5,6,13,17,24,27,36,37,38,40,64,96,],[11,11,11,11,-2,-4,11,-11,11,11,11,-38,-41,]),'CLOSING_BRACE':([4,5,6,12,13,17,22,24,36,37,39,40,43,44,46,49,61,64,65,66,67,90,91,96,108,165,167,168,173,175,179,188,190,191,193,194,195,],[-3,-10,-3,21,-10,-2,-9,-4,-11,-40,-45,-40,64,-45,-59,-56,-39,-38,-44,-46,-47,-54,-55,-41,-53,-62,-57,-58,-50,182,-48,-52,-61,-49,-62,-51,-60,]),'SEMICOLON':([18,19,20,28,33,37,39,40,44,45,46,47,49,53,54,55,56,59,61,62,63,64,66,67,70,74,75,76,77,79,80,81,82,83,84,85,90,91,96,100,101,102,108,124,125,126,127,132,134,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,167,168,169,172,173,179,182,184,186,188,189,191,192,194,],[24,-6,-8,-5,-7,-40,46,-40,46,66,-59,67,-56,-69,-37,90,91,-66,-39,96,-43,-38,-46,-47,-68,108,-36,-71,-72,-74,-75,-69,-30,-31,-32,-33,-54,-55,-41,137,-67,-69,-53,-92,-90,-91,-93,-65,-42,-12,-70,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-73,167,168,173,174,-57,-58,-13,179,-50,-48,188,46,191,-52,46,-49,194,-51,]),'COMMA':([19,20,33,35,63,76,77,79,80,81,82,83,84,85,106,124,125,126,127,133,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,169,171,],[25,-8,-7,38,97,-71,-72,-74,-75,-69,-30,-31,-32,-33,140,-92,-90,-91,-93,160,-12,-70,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-73,-13,178,]),'OPENING_BRACKET':([20,53,81,102,],[26,73,73,73,]),'OPENING_PARENTHESES':([23,48,50,51,52,53,54,57,58,60,68,69,72,73,78,81,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,],[27,68,69,70,71,72,78,92,93,95,78,78,78,78,78,72,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'INT_CONSTANT':([26,54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,176,178,],[29,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'CLOSING_PARENTHESES':([27,30,31,35,42,59,72,76,77,79,80,81,82,83,84,85,98,99,102,103,104,105,106,123,124,125,126,127,128,129,130,131,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,161,166,169,170,171,181,185,],[-23,34,-22,-25,-24,-66,-15,-71,-72,-74,-75,-69,-30,-31,-32,-33,135,136,-69,138,139,-14,-17,156,-92,-90,-91,-93,157,158,-63,-64,-65,-12,-70,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-73,169,-19,-16,-13,-18,-21,187,-20,]),'CLOSING_BRACKET':([29,76,77,79,80,81,82,83,84,85,107,124,125,126,127,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,169,],[33,-71,-72,-74,-75,-69,-30,-31,-32,-33,141,-92,-90,-91,-93,-12,-70,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-73,-13,]),'IF_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,48,-40,48,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,48,-52,48,-49,-51,]),'WHILE_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,50,-40,50,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,50,-52,50,-49,-51,]),'FOR_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,51,-40,51,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,51,-52,51,-49,-51,]),'SWITCH_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,52,-40,52,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,52,-52,52,-49,-51,]),'RETURN_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,54,-40,54,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,54,-52,54,-49,-51,]),'BREAK_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,55,-40,55,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,55,-52,55,-49,-51,]),'CONTINUE_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,56,-40,56,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,56,-52,56,-49,-51,]),'READ_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,57,-40,57,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,57,-52,57,-49,-51,]),'WRITE_KW':([37,39,40,44,46,49,61,64,66,67,90,91,96,108,167,168,173,179,184,188,189,191,194,],[-40,58,-40,58,-59,-56,-39,-38,-46,-47,-54,-55,-41,-53,-57,-58,-50,-48,58,-52,58,-49,-51,]),'CALLOUT_KW':([37,39,40,44,46,49,54,61,64,66,67,68,69,72,73,78,86,87,88,89,90,91,93,94,96,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,167,168,173,178,179,184,188,189,191,194,],[-40,60,-40,60,-59,-56,60,-39,-38,-46,-47,60,60,60,60,60,60,60,60,60,-54,-55,60,60,-41,-53,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-57,-58,-50,60,-48,60,-52,60,-49,-51,]),'CASE_KW':([46,49,64,66,67,90,91,108,165,167,168,173,179,188,191,193,194,],[-59,-56,-38,-46,-47,-54,-55,-53,176,-57,-58,-50,-48,-52,-49,176,-51,]),'DEFAULT_KW':([46,49,64,66,67,90,91,108,165,167,168,173,179,188,191,193,194,],[-59,-56,-38,-46,-47,-54,-55,-53,177,-57,-58,-50,-48,-52,-49,177,-51,]),'EXP':([53,59,102,141,],[-69,94,-69,-70,]),'FLOAT_CONSTANT':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,176,178,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'CHAR_CONSTANT':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,176,178,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'BOOL_CONSTANT':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,176,178,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'SHR':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'SHL':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'MINUS':([54,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,94,98,99,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,132,133,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,161,164,169,171,178,],[86,86,86,86,86,120,-71,-72,86,-74,-75,-69,-30,-31,-32,-33,86,86,86,86,86,86,120,120,120,120,86,86,86,86,86,86,86,86,86,86,86,86,86,86,120,-92,120,120,-93,120,120,86,86,-12,86,-70,120,120,120,120,120,120,120,120,120,120,-86,-87,-88,-89,-73,86,120,120,-13,120,86,]),'NOT':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'ELSE_KW':([64,172,],[-38,180,]),'LT':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[109,-71,-72,-74,-75,-69,-30,-31,-32,-33,109,109,109,109,109,-92,109,109,-93,109,109,-12,-70,-76,-77,-78,-79,109,109,109,109,109,109,-86,-87,-88,-89,-73,109,109,-13,109,]),'LE':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[110,-71,-72,-74,-75,-69,-30,-31,-32,-33,110,110,110,110,110,-92,110,110,-93,110,110,-12,-70,-76,-77,-78,-79,110,110,110,110,110,110,-86,-87,-88,-89,-73,110,110,-13,110,]),'GT':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[111,-71,-72,-74,-75,-69,-30,-31,-32,-33,111,111,111,111,111,-92,111,111,-93,111,111,-12,-70,-76,-77,-78,-79,111,111,111,111,111,111,-86,-87,-88,-89,-73,111,111,-13,111,]),'GE':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[112,-71,-72,-74,-75,-69,-30,-31,-32,-33,112,112,112,112,112,-92,112,112,-93,112,112,-12,-70,-76,-77,-78,-79,112,112,112,112,112,112,-86,-87,-88,-89,-73,112,112,-13,112,]),'EQ':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[113,-71,-72,-74,-75,-69,-30,-31,-32,-33,113,113,113,113,113,-92,113,113,-93,113,113,-12,-70,-76,-77,-78,-79,-80,113,113,113,113,113,-86,-87,-88,-89,-73,113,113,-13,113,]),'NE':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[114,-71,-72,-74,-75,-69,-30,-31,-32,-33,114,114,114,114,114,-92,114,114,-93,114,114,-12,-70,-76,-77,-78,-79,-80,114,-82,-83,-84,-85,-86,-87,-88,-89,-73,114,114,-13,114,]),'AND':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[115,-71,-72,-74,-75,-69,-30,-31,-32,-33,115,115,115,115,115,-92,115,115,-93,115,115,-12,-70,-76,-77,-78,-79,-80,115,-82,115,-84,115,-86,-87,-88,-89,-73,115,115,-13,115,]),'OR':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[116,-71,-72,-74,-75,-69,-30,-31,-32,-33,116,116,116,116,116,-92,116,116,-93,116,116,-12,-70,-76,-77,-78,-79,-80,116,-82,-83,-84,-85,-86,-87,-88,-89,-73,116,116,-13,116,]),'AND_THEN':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[117,-71,-72,-74,-75,-69,-30,-31,-32,-33,117,117,117,117,117,-92,117,117,-93,117,117,-12,-70,-76,-77,-78,-79,-80,117,-82,117,-84,117,-86,-87,-88,-89,-73,117,117,-13,117,]),'OR_ELSE':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[118,-71,-72,-74,-75,-69,-30,-31,-32,-33,118,118,118,118,118,-92,118,118,-93,118,118,-12,-70,-76,-77,-78,-79,-80,118,-82,-83,-84,-85,-86,-87,-88,-89,-73,118,118,-13,118,]),'PLUS':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[119,-71,-72,-74,-75,-69,-30,-31,-32,-33,119,119,119,119,119,-92,119,119,-93,119,119,-12,-70,119,119,119,119,119,119,119,119,119,119,-86,-87,-88,-89,-73,119,119,-13,119,]),'DIV':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[121,-71,-72,-74,-75,-69,-30,-31,-32,-33,121,121,121,121,121,121,121,121,-93,121,121,-12,-70,121,121,121,121,121,121,121,121,121,121,121,121,-88,121,-73,121,121,-13,121,]),'REM':([75,76,77,79,80,81,82,83,84,85,98,99,106,107,123,124,125,126,127,130,132,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,161,164,169,171,],[122,-71,-72,-74,-75,-69,-30,-31,-32,-33,122,122,122,122,122,122,122,122,-93,122,122,-12,-70,122,122,122,122,122,122,122,122,122,122,122,122,-88,-89,-73,122,122,-13,122,]),'COLON':([82,83,84,85,177,183,],[-30,-31,-32,-33,184,189,]),'STRING_CONSTANT':([93,95,],[131,133,]),'THEN_KW':([135,],[162,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'field_decl_list':([4,6,],[5,17,]),'field_decl':([4,6,],[6,6,]),'type':([4,5,6,13,27,37,38,40,],[7,15,7,15,32,41,32,41,]),'method_decl_list':([5,13,],[12,22,]),'method_decl':([5,13,],[13,13,]),'return_type':([5,13,],[14,14,]),'field_name_list':([7,25,],[18,28,]),'field_name':([7,25,],[19,19,]),'formal_parameter_list':([27,],[30,]),'argumant_list':([27,38,],[31,42,]),'block':([34,39,44,136,162,180,184,187,189,],[36,49,49,163,172,186,49,192,49,]),'var_decl_list':([37,40,],[39,61,]),'var_decl':([37,40,],[40,40,]),'statement_list':([39,44,],[43,65,]),'statement':([39,44,184,189,],[44,44,190,193,]),'assignment':([39,44,70,174,184,189,],[45,45,101,181,45,45,]),'method_call':([39,44,54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,184,189,],[47,47,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,47,47,]),'location':([39,44,54,68,69,70,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,174,178,184,189,],[59,59,76,76,76,59,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,59,76,59,59,]),'id_list':([41,97,],[62,134,]),'return_expr':([54,],[74,]),'expr':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,],[75,98,99,106,107,123,124,125,126,127,130,132,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,106,171,171,]),'constant':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,176,178,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,183,77,]),'operational_expr':([54,68,69,72,73,78,86,87,88,89,93,94,109,110,111,112,113,114,115,116,117,118,119,120,121,122,133,137,140,160,178,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'for_initialize':([70,],[100,]),'actual_parameters':([72,],[104,]),'actual_parameter_list':([72,140,],[105,166,]),'write_parameter':([93,],[129,]),'callout_parameters':([133,],[159,]),'callout_parameter_list':([160,178,],[170,185,]),'case_statements':([165,193,],[175,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE','program',6,'p_start_program','yacc.py',21),
  ('field_decl_list -> field_decl field_decl_list','field_decl_list',2,'p_decl_list','yacc.py',25),
  ('field_decl_list -> <empty>','field_decl_list',0,'p_decl_list','yacc.py',26),
  ('field_decl -> type field_name_list SEMICOLON','field_decl',3,'p_decl','yacc.py',34),
  ('field_name_list -> field_name COMMA field_name_list','field_name_list',3,'p_field_name_list','yacc.py',38),
  ('field_name_list -> field_name','field_name_list',1,'p_field_name_list','yacc.py',39),
  ('field_name -> ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET','field_name',4,'p_field_name','yacc.py',47),
  ('field_name -> ID','field_name',1,'p_field_name','yacc.py',48),
  ('method_decl_list -> method_decl method_decl_list','method_decl_list',2,'p_method_decl_list','yacc.py',56),
  ('method_decl_list -> <empty>','method_decl_list',0,'p_method_decl_list','yacc.py',57),
  ('method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block','method_decl',6,'p_method_decl','yacc.py',65),
  ('method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES','method_call',4,'p_method_call','yacc.py',69),
  ('method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES','method_call',5,'p_method_call','yacc.py',70),
  ('actual_parameters -> actual_parameter_list','actual_parameters',1,'p_actual_parameters','yacc.py',74),
  ('actual_parameters -> <empty>','actual_parameters',0,'p_actual_parameters','yacc.py',75),
  ('actual_parameter_list -> expr COMMA actual_parameter_list','actual_parameter_list',3,'p_actual_parameter_list','yacc.py',83),
  ('actual_parameter_list -> expr','actual_parameter_list',1,'p_actual_parameter_list','yacc.py',84),
  ('callout_parameters -> COMMA callout_parameter_list','callout_parameters',2,'p_callout_parameters','yacc.py',92),
  ('callout_parameters -> expr','callout_parameters',1,'p_callout_parameters','yacc.py',93),
  ('callout_parameter_list -> expr COMMA callout_parameter_list','callout_parameter_list',3,'p_callout_parameter_list','yacc.py',101),
  ('callout_parameter_list -> expr','callout_parameter_list',1,'p_callout_parameter_list','yacc.py',102),
  ('formal_parameter_list -> argumant_list','formal_parameter_list',1,'p_formal_parameter_list','yacc.py',110),
  ('formal_parameter_list -> <empty>','formal_parameter_list',0,'p_formal_parameter_list','yacc.py',111),
  ('argumant_list -> type ID COMMA argumant_list','argumant_list',4,'p_argumant_list','yacc.py',119),
  ('argumant_list -> type ID','argumant_list',2,'p_argumant_list','yacc.py',120),
  ('type -> INT_KW','type',1,'p_type','yacc.py',128),
  ('type -> FLOAT_KW','type',1,'p_type','yacc.py',129),
  ('type -> CHAR_KW','type',1,'p_type','yacc.py',130),
  ('type -> BOOL_KW','type',1,'p_type','yacc.py',131),
  ('constant -> INT_CONSTANT','constant',1,'p_constant','yacc.py',143),
  ('constant -> FLOAT_CONSTANT','constant',1,'p_constant','yacc.py',144),
  ('constant -> CHAR_CONSTANT','constant',1,'p_constant','yacc.py',145),
  ('constant -> BOOL_CONSTANT','constant',1,'p_constant','yacc.py',146),
  ('return_type -> type','return_type',1,'p_return_type','yacc.py',150),
  ('return_type -> VOID_KW','return_type',1,'p_return_type','yacc.py',151),
  ('return_expr -> expr','return_expr',1,'p_return_expr','yacc.py',156),
  ('return_expr -> <empty>','return_expr',0,'p_return_expr','yacc.py',157),
  ('block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE','block',4,'p_block','yacc.py',162),
  ('var_decl_list -> var_decl var_decl_list','var_decl_list',2,'p_var_decl_list','yacc.py',166),
  ('var_decl_list -> <empty>','var_decl_list',0,'p_var_decl_list','yacc.py',167),
  ('var_decl -> type id_list SEMICOLON','var_decl',3,'p_var_decl','yacc.py',175),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','yacc.py',179),
  ('id_list -> ID','id_list',1,'p_id_list','yacc.py',180),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','yacc.py',188),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','yacc.py',189),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','yacc.py',197),
  ('statement -> method_call SEMICOLON','statement',2,'p_statement','yacc.py',198),
  ('statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON','statement',7,'p_statement','yacc.py',199),
  ('statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON','statement',9,'p_statement','yacc.py',200),
  ('statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON','statement',6,'p_statement','yacc.py',201),
  ('statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON','statement',10,'p_statement','yacc.py',202),
  ('statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON','statement',8,'p_statement','yacc.py',203),
  ('statement -> RETURN_KW return_expr SEMICOLON','statement',3,'p_statement','yacc.py',204),
  ('statement -> BREAK_KW SEMICOLON','statement',2,'p_statement','yacc.py',205),
  ('statement -> CONTINUE_KW SEMICOLON','statement',2,'p_statement','yacc.py',206),
  ('statement -> block','statement',1,'p_statement','yacc.py',207),
  ('statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON','statement',5,'p_statement','yacc.py',208),
  ('statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON','statement',5,'p_statement','yacc.py',209),
  ('statement -> SEMICOLON','statement',1,'p_statement','yacc.py',210),
  ('case_statements -> CASE_KW constant COLON statement case_statements','case_statements',5,'p_case_statement','yacc.py',215),
  ('case_statements -> DEFAULT_KW COLON statement','case_statements',3,'p_case_statement','yacc.py',216),
  ('case_statements -> <empty>','case_statements',0,'p_case_statement','yacc.py',217),
  ('write_parameter -> expr','write_parameter',1,'p_write_parameter','yacc.py',222),
  ('write_parameter -> STRING_CONSTANT','write_parameter',1,'p_write_parameter','yacc.py',223),
  ('assignment -> location EXP expr','assignment',3,'p_assignment','yacc.py',228),
  ('assignment -> location','assignment',1,'p_assignment','yacc.py',229),
  ('for_initialize -> assignment','for_initialize',1,'p_for_initialize','yacc.py',234),
  ('for_initialize -> <empty>','for_initialize',0,'p_for_initialize','yacc.py',235),
  ('location -> ID','location',1,'p_location','yacc.py',240),
  ('location -> ID OPENING_BRACKET expr CLOSING_BRACKET','location',4,'p_location','yacc.py',241),
  ('expr -> location','expr',1,'p_expr','yacc.py',245),
  ('expr -> constant','expr',1,'p_expr','yacc.py',246),
  ('expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES','expr',3,'p_expr','yacc.py',247),
  ('expr -> method_call','expr',1,'p_expr','yacc.py',248),
  ('expr -> operational_expr','expr',1,'p_expr','yacc.py',249),
  ('operational_expr -> expr LT expr','operational_expr',3,'p_operational_expr','yacc.py',254),
  ('operational_expr -> expr LE expr','operational_expr',3,'p_operational_expr','yacc.py',255),
  ('operational_expr -> expr GT expr','operational_expr',3,'p_operational_expr','yacc.py',256),
  ('operational_expr -> expr GE expr','operational_expr',3,'p_operational_expr','yacc.py',257),
  ('operational_expr -> expr EQ expr','operational_expr',3,'p_operational_expr','yacc.py',258),
  ('operational_expr -> expr NE expr','operational_expr',3,'p_operational_expr','yacc.py',259),
  ('operational_expr -> expr AND expr','operational_expr',3,'p_operational_expr','yacc.py',260),
  ('operational_expr -> expr OR expr','operational_expr',3,'p_operational_expr','yacc.py',261),
  ('operational_expr -> expr AND_THEN expr','operational_expr',3,'p_operational_expr','yacc.py',262),
  ('operational_expr -> expr OR_ELSE expr','operational_expr',3,'p_operational_expr','yacc.py',263),
  ('operational_expr -> expr PLUS expr','operational_expr',3,'p_operational_expr','yacc.py',264),
  ('operational_expr -> expr MINUS expr','operational_expr',3,'p_operational_expr','yacc.py',265),
  ('operational_expr -> expr DIV expr','operational_expr',3,'p_operational_expr','yacc.py',266),
  ('operational_expr -> expr REM expr','operational_expr',3,'p_operational_expr','yacc.py',267),
  ('operational_expr -> SHR expr','operational_expr',2,'p_operational_expr','yacc.py',268),
  ('operational_expr -> SHL expr','operational_expr',2,'p_operational_expr','yacc.py',269),
  ('operational_expr -> MINUS expr','operational_expr',2,'p_operational_expr','yacc.py',270),
  ('operational_expr -> NOT expr','operational_expr',2,'p_operational_expr','yacc.py',271),
]
