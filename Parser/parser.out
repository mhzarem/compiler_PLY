Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR
    MULT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE
Rule 2     field_decl_list -> field_decl field_decl_list
Rule 3     field_decl_list -> <empty>
Rule 4     field_decl -> type field_name_list SEMICOLON
Rule 5     field_name_list -> field_name COMMA field_name_list
Rule 6     field_name_list -> field_name
Rule 7     field_name -> ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET
Rule 8     field_name -> ID
Rule 9     method_decl_list -> method_decl method_decl_list
Rule 10    method_decl_list -> <empty>
Rule 11    method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block
Rule 12    method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
Rule 13    method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
Rule 14    actual_parameters -> actual_parameter_list
Rule 15    actual_parameters -> <empty>
Rule 16    actual_parameter_list -> expr COMMA actual_parameter_list
Rule 17    actual_parameter_list -> expr
Rule 18    callout_parameters -> COMMA callout_parameter_list
Rule 19    callout_parameters -> expr
Rule 20    callout_parameter_list -> expr COMMA callout_parameter_list
Rule 21    callout_parameter_list -> expr
Rule 22    formal_parameter_list -> argumant_list
Rule 23    formal_parameter_list -> <empty>
Rule 24    argumant_list -> type ID COMMA argumant_list
Rule 25    argumant_list -> type ID
Rule 26    type -> INT_KW
Rule 27    type -> FLOAT_KW
Rule 28    type -> CHAR_KW
Rule 29    type -> BOOL_KW
Rule 30    constant -> INT_CONSTANT
Rule 31    constant -> FLOAT_CONSTANT
Rule 32    constant -> CHAR_CONSTANT
Rule 33    constant -> BOOL_CONSTANT
Rule 34    return_type -> type
Rule 35    return_type -> VOID_KW
Rule 36    return_expr -> expr
Rule 37    return_expr -> <empty>
Rule 38    block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE
Rule 39    var_decl_list -> var_decl var_decl_list
Rule 40    var_decl_list -> <empty>
Rule 41    var_decl -> type id_list SEMICOLON
Rule 42    id_list -> ID COMMA id_list
Rule 43    id_list -> ID
Rule 44    statement_list -> statement statement_list
Rule 45    statement_list -> <empty>
Rule 46    statement -> assignment SEMICOLON
Rule 47    statement -> method_call SEMICOLON
Rule 48    statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
Rule 49    statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
Rule 50    statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON
Rule 51    statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
Rule 52    statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON
Rule 53    statement -> RETURN_KW return_expr SEMICOLON
Rule 54    statement -> BREAK_KW SEMICOLON
Rule 55    statement -> CONTINUE_KW SEMICOLON
Rule 56    statement -> block
Rule 57    statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON
Rule 58    statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON
Rule 59    statement -> SEMICOLON
Rule 60    case_statements -> CASE_KW constant COLON statement case_statements
Rule 61    case_statements -> DEFAULT_KW COLON statement
Rule 62    case_statements -> <empty>
Rule 63    write_parameter -> expr
Rule 64    write_parameter -> STRING_CONSTANT
Rule 65    assignment -> location EXP expr
Rule 66    assignment -> location
Rule 67    for_initialize -> assignment
Rule 68    for_initialize -> <empty>
Rule 69    location -> ID
Rule 70    location -> ID OPENING_BRACKET expr CLOSING_BRACKET
Rule 71    expr -> location
Rule 72    expr -> constant
Rule 73    expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES
Rule 74    expr -> method_call
Rule 75    expr -> operational_expr
Rule 76    operational_expr -> expr LT expr
Rule 77    operational_expr -> expr LE expr
Rule 78    operational_expr -> expr GT expr
Rule 79    operational_expr -> expr GE expr
Rule 80    operational_expr -> expr EQ expr
Rule 81    operational_expr -> expr NE expr
Rule 82    operational_expr -> expr AND expr
Rule 83    operational_expr -> expr OR expr
Rule 84    operational_expr -> expr AND_THEN expr
Rule 85    operational_expr -> expr OR_ELSE expr
Rule 86    operational_expr -> expr PLUS expr
Rule 87    operational_expr -> expr MINUS expr
Rule 88    operational_expr -> expr DIV expr
Rule 89    operational_expr -> expr REM expr
Rule 90    operational_expr -> SHR expr
Rule 91    operational_expr -> SHL expr
Rule 92    operational_expr -> MINUS expr
Rule 93    operational_expr -> NOT expr

Terminals, with rules where they appear

AND                  : 82
AND_THEN             : 84
BOOL_CONSTANT        : 33
BOOL_KW              : 29
BREAK_KW             : 54
CALLOUT_KW           : 13
CASE_KW              : 60
CHAR_CONSTANT        : 32
CHAR_KW              : 28
CLOSING_BRACE        : 1 38 52
CLOSING_BRACKET      : 7 70
CLOSING_PARENTHESES  : 11 12 13 48 49 50 51 52 57 58 73
COLON                : 60 61
COMMA                : 5 16 18 20 24 42
CONTINUE_KW          : 55
DEFAULT_KW           : 61
DIV                  : 88
ELSE_KW              : 49
EQ                   : 80
ERROR                : 
EXP                  : 65
FLOAT_CONSTANT       : 31
FLOAT_KW             : 27
FOR_KW               : 51
GE                   : 79
GT                   : 78
ID                   : 1 7 8 11 12 24 25 42 43 52 57 69 70
IF_KW                : 48 49
INT_CONSTANT         : 7 30
INT_KW               : 26
LE                   : 77
LT                   : 76
MINUS                : 87 92
MULT                 : 
NE                   : 81
NOT                  : 93
OPENING_BRACE        : 1 38 52
OPENING_BRACKET      : 7 70
OPENING_PARENTHESES  : 11 12 13 48 49 50 51 52 57 58 73
OR                   : 83
OR_ELSE              : 85
PLUS                 : 86
PROGRAM_KW           : 1
READ_KW              : 57
REM                  : 89
RETURN_KW            : 53
SEMICOLON            : 4 41 46 47 48 49 50 51 51 51 52 53 54 55 57 58 59
SHL                  : 91
SHR                  : 90
STRING_CONSTANT      : 13 64
SWITCH_KW            : 52
THEN_KW              : 48 49
VOID_KW              : 35
WHILE_KW             : 50
WRITE_KW             : 58
error                : 

Nonterminals, with rules where they appear

actual_parameter_list : 14 16
actual_parameters    : 12
argumant_list        : 22 24
assignment           : 46 51 67
block                : 11 48 49 49 50 51 56
callout_parameter_list : 18 20
callout_parameters   : 13
case_statements      : 52 60
constant             : 60 72
expr                 : 16 17 19 20 21 36 48 49 50 51 63 65 70 73 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 91 92 93
field_decl           : 2
field_decl_list      : 1 2
field_name           : 5 6
field_name_list      : 4 5
for_initialize       : 51
formal_parameter_list : 11
id_list              : 41 42
location             : 65 66 71
method_call          : 47 74
method_decl          : 9
method_decl_list     : 1 9
operational_expr     : 75
program              : 0
return_expr          : 53
return_type          : 11
statement            : 44 60 61
statement_list       : 38 44
type                 : 4 24 25 34 41
var_decl             : 39
var_decl_list        : 38 39
write_parameter      : 58

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE

    PROGRAM_KW      shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM_KW . ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM_KW ID . OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE

    OPENING_BRACE   shift and go to state 4


state 4

    (1) program -> PROGRAM_KW ID OPENING_BRACE . field_decl_list method_decl_list CLOSING_BRACE
    (2) field_decl_list -> . field_decl field_decl_list
    (3) field_decl_list -> .
    (4) field_decl -> . type field_name_list SEMICOLON
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

  ! shift/reduce conflict for INT_KW resolved as shift
  ! shift/reduce conflict for FLOAT_KW resolved as shift
  ! shift/reduce conflict for CHAR_KW resolved as shift
  ! shift/reduce conflict for BOOL_KW resolved as shift
    VOID_KW         reduce using rule 3 (field_decl_list -> .)
    CLOSING_BRACE   reduce using rule 3 (field_decl_list -> .)
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

  ! INT_KW          [ reduce using rule 3 (field_decl_list -> .) ]
  ! FLOAT_KW        [ reduce using rule 3 (field_decl_list -> .) ]
  ! CHAR_KW         [ reduce using rule 3 (field_decl_list -> .) ]
  ! BOOL_KW         [ reduce using rule 3 (field_decl_list -> .) ]

    field_decl_list                shift and go to state 5
    field_decl                     shift and go to state 6
    type                           shift and go to state 7

state 5

    (1) program -> PROGRAM_KW ID OPENING_BRACE field_decl_list . method_decl_list CLOSING_BRACE
    (9) method_decl_list -> . method_decl method_decl_list
    (10) method_decl_list -> .
    (11) method_decl -> . return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block
    (34) return_type -> . type
    (35) return_type -> . VOID_KW
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

    CLOSING_BRACE   reduce using rule 10 (method_decl_list -> .)
    VOID_KW         shift and go to state 16
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

    method_decl_list               shift and go to state 12
    method_decl                    shift and go to state 13
    return_type                    shift and go to state 14
    type                           shift and go to state 15

state 6

    (2) field_decl_list -> field_decl . field_decl_list
    (2) field_decl_list -> . field_decl field_decl_list
    (3) field_decl_list -> .
    (4) field_decl -> . type field_name_list SEMICOLON
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

  ! shift/reduce conflict for INT_KW resolved as shift
  ! shift/reduce conflict for FLOAT_KW resolved as shift
  ! shift/reduce conflict for CHAR_KW resolved as shift
  ! shift/reduce conflict for BOOL_KW resolved as shift
    VOID_KW         reduce using rule 3 (field_decl_list -> .)
    CLOSING_BRACE   reduce using rule 3 (field_decl_list -> .)
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

  ! INT_KW          [ reduce using rule 3 (field_decl_list -> .) ]
  ! FLOAT_KW        [ reduce using rule 3 (field_decl_list -> .) ]
  ! CHAR_KW         [ reduce using rule 3 (field_decl_list -> .) ]
  ! BOOL_KW         [ reduce using rule 3 (field_decl_list -> .) ]

    field_decl                     shift and go to state 6
    field_decl_list                shift and go to state 17
    type                           shift and go to state 7

state 7

    (4) field_decl -> type . field_name_list SEMICOLON
    (5) field_name_list -> . field_name COMMA field_name_list
    (6) field_name_list -> . field_name
    (7) field_name -> . ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET
    (8) field_name -> . ID

    ID              shift and go to state 20

    field_name_list                shift and go to state 18
    field_name                     shift and go to state 19

state 8

    (26) type -> INT_KW .

    ID              reduce using rule 26 (type -> INT_KW .)


state 9

    (27) type -> FLOAT_KW .

    ID              reduce using rule 27 (type -> FLOAT_KW .)


state 10

    (28) type -> CHAR_KW .

    ID              reduce using rule 28 (type -> CHAR_KW .)


state 11

    (29) type -> BOOL_KW .

    ID              reduce using rule 29 (type -> BOOL_KW .)


state 12

    (1) program -> PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 21


state 13

    (9) method_decl_list -> method_decl . method_decl_list
    (9) method_decl_list -> . method_decl method_decl_list
    (10) method_decl_list -> .
    (11) method_decl -> . return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block
    (34) return_type -> . type
    (35) return_type -> . VOID_KW
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

    CLOSING_BRACE   reduce using rule 10 (method_decl_list -> .)
    VOID_KW         shift and go to state 16
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

    method_decl                    shift and go to state 13
    method_decl_list               shift and go to state 22
    return_type                    shift and go to state 14
    type                           shift and go to state 15

state 14

    (11) method_decl -> return_type . ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block

    ID              shift and go to state 23


state 15

    (34) return_type -> type .

    ID              reduce using rule 34 (return_type -> type .)


state 16

    (35) return_type -> VOID_KW .

    ID              reduce using rule 35 (return_type -> VOID_KW .)


state 17

    (2) field_decl_list -> field_decl field_decl_list .

    VOID_KW         reduce using rule 2 (field_decl_list -> field_decl field_decl_list .)
    INT_KW          reduce using rule 2 (field_decl_list -> field_decl field_decl_list .)
    FLOAT_KW        reduce using rule 2 (field_decl_list -> field_decl field_decl_list .)
    CHAR_KW         reduce using rule 2 (field_decl_list -> field_decl field_decl_list .)
    BOOL_KW         reduce using rule 2 (field_decl_list -> field_decl field_decl_list .)
    CLOSING_BRACE   reduce using rule 2 (field_decl_list -> field_decl field_decl_list .)


state 18

    (4) field_decl -> type field_name_list . SEMICOLON

    SEMICOLON       shift and go to state 24


state 19

    (5) field_name_list -> field_name . COMMA field_name_list
    (6) field_name_list -> field_name .

    COMMA           shift and go to state 25
    SEMICOLON       reduce using rule 6 (field_name_list -> field_name .)


state 20

    (7) field_name -> ID . OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET
    (8) field_name -> ID .

    OPENING_BRACKET shift and go to state 26
    COMMA           reduce using rule 8 (field_name -> ID .)
    SEMICOLON       reduce using rule 8 (field_name -> ID .)


state 21

    (1) program -> PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE .

    $end            reduce using rule 1 (program -> PROGRAM_KW ID OPENING_BRACE field_decl_list method_decl_list CLOSING_BRACE .)


state 22

    (9) method_decl_list -> method_decl method_decl_list .

    CLOSING_BRACE   reduce using rule 9 (method_decl_list -> method_decl method_decl_list .)


state 23

    (11) method_decl -> return_type ID . OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block

    OPENING_PARENTHESES shift and go to state 27


state 24

    (4) field_decl -> type field_name_list SEMICOLON .

    INT_KW          reduce using rule 4 (field_decl -> type field_name_list SEMICOLON .)
    FLOAT_KW        reduce using rule 4 (field_decl -> type field_name_list SEMICOLON .)
    CHAR_KW         reduce using rule 4 (field_decl -> type field_name_list SEMICOLON .)
    BOOL_KW         reduce using rule 4 (field_decl -> type field_name_list SEMICOLON .)
    VOID_KW         reduce using rule 4 (field_decl -> type field_name_list SEMICOLON .)
    CLOSING_BRACE   reduce using rule 4 (field_decl -> type field_name_list SEMICOLON .)


state 25

    (5) field_name_list -> field_name COMMA . field_name_list
    (5) field_name_list -> . field_name COMMA field_name_list
    (6) field_name_list -> . field_name
    (7) field_name -> . ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET
    (8) field_name -> . ID

    ID              shift and go to state 20

    field_name                     shift and go to state 19
    field_name_list                shift and go to state 28

state 26

    (7) field_name -> ID OPENING_BRACKET . INT_CONSTANT CLOSING_BRACKET

    INT_CONSTANT    shift and go to state 29


state 27

    (11) method_decl -> return_type ID OPENING_PARENTHESES . formal_parameter_list CLOSING_PARENTHESES block
    (22) formal_parameter_list -> . argumant_list
    (23) formal_parameter_list -> .
    (24) argumant_list -> . type ID COMMA argumant_list
    (25) argumant_list -> . type ID
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

    CLOSING_PARENTHESES reduce using rule 23 (formal_parameter_list -> .)
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

    formal_parameter_list          shift and go to state 30
    argumant_list                  shift and go to state 31
    type                           shift and go to state 32

state 28

    (5) field_name_list -> field_name COMMA field_name_list .

    SEMICOLON       reduce using rule 5 (field_name_list -> field_name COMMA field_name_list .)


state 29

    (7) field_name -> ID OPENING_BRACKET INT_CONSTANT . CLOSING_BRACKET

    CLOSING_BRACKET shift and go to state 33


state 30

    (11) method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list . CLOSING_PARENTHESES block

    CLOSING_PARENTHESES shift and go to state 34


state 31

    (22) formal_parameter_list -> argumant_list .

    CLOSING_PARENTHESES reduce using rule 22 (formal_parameter_list -> argumant_list .)


state 32

    (24) argumant_list -> type . ID COMMA argumant_list
    (25) argumant_list -> type . ID

    ID              shift and go to state 35


state 33

    (7) field_name -> ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET .

    COMMA           reduce using rule 7 (field_name -> ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 7 (field_name -> ID OPENING_BRACKET INT_CONSTANT CLOSING_BRACKET .)


state 34

    (11) method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES . block
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE

    OPENING_BRACE   shift and go to state 37

    block                          shift and go to state 36

state 35

    (24) argumant_list -> type ID . COMMA argumant_list
    (25) argumant_list -> type ID .

    COMMA           shift and go to state 38
    CLOSING_PARENTHESES reduce using rule 25 (argumant_list -> type ID .)


state 36

    (11) method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .

    VOID_KW         reduce using rule 11 (method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .)
    INT_KW          reduce using rule 11 (method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .)
    FLOAT_KW        reduce using rule 11 (method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .)
    CHAR_KW         reduce using rule 11 (method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .)
    BOOL_KW         reduce using rule 11 (method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .)
    CLOSING_BRACE   reduce using rule 11 (method_decl -> return_type ID OPENING_PARENTHESES formal_parameter_list CLOSING_PARENTHESES block .)


state 37

    (38) block -> OPENING_BRACE . var_decl_list statement_list CLOSING_BRACE
    (39) var_decl_list -> . var_decl var_decl_list
    (40) var_decl_list -> .
    (41) var_decl -> . type id_list SEMICOLON
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

    IF_KW           reduce using rule 40 (var_decl_list -> .)
    WHILE_KW        reduce using rule 40 (var_decl_list -> .)
    FOR_KW          reduce using rule 40 (var_decl_list -> .)
    SWITCH_KW       reduce using rule 40 (var_decl_list -> .)
    RETURN_KW       reduce using rule 40 (var_decl_list -> .)
    BREAK_KW        reduce using rule 40 (var_decl_list -> .)
    CONTINUE_KW     reduce using rule 40 (var_decl_list -> .)
    READ_KW         reduce using rule 40 (var_decl_list -> .)
    WRITE_KW        reduce using rule 40 (var_decl_list -> .)
    SEMICOLON       reduce using rule 40 (var_decl_list -> .)
    ID              reduce using rule 40 (var_decl_list -> .)
    CALLOUT_KW      reduce using rule 40 (var_decl_list -> .)
    OPENING_BRACE   reduce using rule 40 (var_decl_list -> .)
    CLOSING_BRACE   reduce using rule 40 (var_decl_list -> .)
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

    var_decl_list                  shift and go to state 39
    var_decl                       shift and go to state 40
    type                           shift and go to state 41

state 38

    (24) argumant_list -> type ID COMMA . argumant_list
    (24) argumant_list -> . type ID COMMA argumant_list
    (25) argumant_list -> . type ID
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

    type                           shift and go to state 32
    argumant_list                  shift and go to state 42

state 39

    (38) block -> OPENING_BRACE var_decl_list . statement_list CLOSING_BRACE
    (44) statement_list -> . statement statement_list
    (45) statement_list -> .
    (46) statement -> . assignment SEMICOLON
    (47) statement -> . method_call SEMICOLON
    (48) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
    (50) statement -> . WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON
    (51) statement -> . FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (52) statement -> . SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON
    (53) statement -> . RETURN_KW return_expr SEMICOLON
    (54) statement -> . BREAK_KW SEMICOLON
    (55) statement -> . CONTINUE_KW SEMICOLON
    (56) statement -> . block
    (57) statement -> . READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON
    (58) statement -> . WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON
    (59) statement -> . SEMICOLON
    (65) assignment -> . location EXP expr
    (66) assignment -> . location
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET

    CLOSING_BRACE   reduce using rule 45 (statement_list -> .)
    IF_KW           shift and go to state 48
    WHILE_KW        shift and go to state 50
    FOR_KW          shift and go to state 51
    SWITCH_KW       shift and go to state 52
    RETURN_KW       shift and go to state 54
    BREAK_KW        shift and go to state 55
    CONTINUE_KW     shift and go to state 56
    READ_KW         shift and go to state 57
    WRITE_KW        shift and go to state 58
    SEMICOLON       shift and go to state 46
    ID              shift and go to state 53
    CALLOUT_KW      shift and go to state 60
    OPENING_BRACE   shift and go to state 37

    statement_list                 shift and go to state 43
    statement                      shift and go to state 44
    assignment                     shift and go to state 45
    method_call                    shift and go to state 47
    block                          shift and go to state 49
    location                       shift and go to state 59

state 40

    (39) var_decl_list -> var_decl . var_decl_list
    (39) var_decl_list -> . var_decl var_decl_list
    (40) var_decl_list -> .
    (41) var_decl -> . type id_list SEMICOLON
    (26) type -> . INT_KW
    (27) type -> . FLOAT_KW
    (28) type -> . CHAR_KW
    (29) type -> . BOOL_KW

    IF_KW           reduce using rule 40 (var_decl_list -> .)
    WHILE_KW        reduce using rule 40 (var_decl_list -> .)
    FOR_KW          reduce using rule 40 (var_decl_list -> .)
    SWITCH_KW       reduce using rule 40 (var_decl_list -> .)
    RETURN_KW       reduce using rule 40 (var_decl_list -> .)
    BREAK_KW        reduce using rule 40 (var_decl_list -> .)
    CONTINUE_KW     reduce using rule 40 (var_decl_list -> .)
    READ_KW         reduce using rule 40 (var_decl_list -> .)
    WRITE_KW        reduce using rule 40 (var_decl_list -> .)
    SEMICOLON       reduce using rule 40 (var_decl_list -> .)
    ID              reduce using rule 40 (var_decl_list -> .)
    CALLOUT_KW      reduce using rule 40 (var_decl_list -> .)
    OPENING_BRACE   reduce using rule 40 (var_decl_list -> .)
    CLOSING_BRACE   reduce using rule 40 (var_decl_list -> .)
    INT_KW          shift and go to state 8
    FLOAT_KW        shift and go to state 9
    CHAR_KW         shift and go to state 10
    BOOL_KW         shift and go to state 11

    var_decl                       shift and go to state 40
    var_decl_list                  shift and go to state 61
    type                           shift and go to state 41

state 41

    (41) var_decl -> type . id_list SEMICOLON
    (42) id_list -> . ID COMMA id_list
    (43) id_list -> . ID

    ID              shift and go to state 63

    id_list                        shift and go to state 62

state 42

    (24) argumant_list -> type ID COMMA argumant_list .

    CLOSING_PARENTHESES reduce using rule 24 (argumant_list -> type ID COMMA argumant_list .)


state 43

    (38) block -> OPENING_BRACE var_decl_list statement_list . CLOSING_BRACE

    CLOSING_BRACE   shift and go to state 64


state 44

    (44) statement_list -> statement . statement_list
    (44) statement_list -> . statement statement_list
    (45) statement_list -> .
    (46) statement -> . assignment SEMICOLON
    (47) statement -> . method_call SEMICOLON
    (48) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
    (50) statement -> . WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON
    (51) statement -> . FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (52) statement -> . SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON
    (53) statement -> . RETURN_KW return_expr SEMICOLON
    (54) statement -> . BREAK_KW SEMICOLON
    (55) statement -> . CONTINUE_KW SEMICOLON
    (56) statement -> . block
    (57) statement -> . READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON
    (58) statement -> . WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON
    (59) statement -> . SEMICOLON
    (65) assignment -> . location EXP expr
    (66) assignment -> . location
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET

    CLOSING_BRACE   reduce using rule 45 (statement_list -> .)
    IF_KW           shift and go to state 48
    WHILE_KW        shift and go to state 50
    FOR_KW          shift and go to state 51
    SWITCH_KW       shift and go to state 52
    RETURN_KW       shift and go to state 54
    BREAK_KW        shift and go to state 55
    CONTINUE_KW     shift and go to state 56
    READ_KW         shift and go to state 57
    WRITE_KW        shift and go to state 58
    SEMICOLON       shift and go to state 46
    ID              shift and go to state 53
    CALLOUT_KW      shift and go to state 60
    OPENING_BRACE   shift and go to state 37

    statement                      shift and go to state 44
    statement_list                 shift and go to state 65
    assignment                     shift and go to state 45
    method_call                    shift and go to state 47
    block                          shift and go to state 49
    location                       shift and go to state 59

state 45

    (46) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 66


state 46

    (59) statement -> SEMICOLON .

    IF_KW           reduce using rule 59 (statement -> SEMICOLON .)
    WHILE_KW        reduce using rule 59 (statement -> SEMICOLON .)
    FOR_KW          reduce using rule 59 (statement -> SEMICOLON .)
    SWITCH_KW       reduce using rule 59 (statement -> SEMICOLON .)
    RETURN_KW       reduce using rule 59 (statement -> SEMICOLON .)
    BREAK_KW        reduce using rule 59 (statement -> SEMICOLON .)
    CONTINUE_KW     reduce using rule 59 (statement -> SEMICOLON .)
    READ_KW         reduce using rule 59 (statement -> SEMICOLON .)
    WRITE_KW        reduce using rule 59 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 59 (statement -> SEMICOLON .)
    ID              reduce using rule 59 (statement -> SEMICOLON .)
    CALLOUT_KW      reduce using rule 59 (statement -> SEMICOLON .)
    OPENING_BRACE   reduce using rule 59 (statement -> SEMICOLON .)
    CLOSING_BRACE   reduce using rule 59 (statement -> SEMICOLON .)
    CASE_KW         reduce using rule 59 (statement -> SEMICOLON .)
    DEFAULT_KW      reduce using rule 59 (statement -> SEMICOLON .)


state 47

    (47) statement -> method_call . SEMICOLON

    SEMICOLON       shift and go to state 67


state 48

    (48) statement -> IF_KW . OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> IF_KW . OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON

    OPENING_PARENTHESES shift and go to state 68


state 49

    (56) statement -> block .

    IF_KW           reduce using rule 56 (statement -> block .)
    WHILE_KW        reduce using rule 56 (statement -> block .)
    FOR_KW          reduce using rule 56 (statement -> block .)
    SWITCH_KW       reduce using rule 56 (statement -> block .)
    RETURN_KW       reduce using rule 56 (statement -> block .)
    BREAK_KW        reduce using rule 56 (statement -> block .)
    CONTINUE_KW     reduce using rule 56 (statement -> block .)
    READ_KW         reduce using rule 56 (statement -> block .)
    WRITE_KW        reduce using rule 56 (statement -> block .)
    SEMICOLON       reduce using rule 56 (statement -> block .)
    ID              reduce using rule 56 (statement -> block .)
    CALLOUT_KW      reduce using rule 56 (statement -> block .)
    OPENING_BRACE   reduce using rule 56 (statement -> block .)
    CLOSING_BRACE   reduce using rule 56 (statement -> block .)
    CASE_KW         reduce using rule 56 (statement -> block .)
    DEFAULT_KW      reduce using rule 56 (statement -> block .)


state 50

    (50) statement -> WHILE_KW . OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON

    OPENING_PARENTHESES shift and go to state 69


state 51

    (51) statement -> FOR_KW . OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON

    OPENING_PARENTHESES shift and go to state 70


state 52

    (52) statement -> SWITCH_KW . OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON

    OPENING_PARENTHESES shift and go to state 71


state 53

    (12) method_call -> ID . OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (69) location -> ID .
    (70) location -> ID . OPENING_BRACKET expr CLOSING_BRACKET

    OPENING_PARENTHESES shift and go to state 72
    EXP             reduce using rule 69 (location -> ID .)
    SEMICOLON       reduce using rule 69 (location -> ID .)
    OPENING_BRACKET shift and go to state 73


state 54

    (53) statement -> RETURN_KW . return_expr SEMICOLON
    (36) return_expr -> . expr
    (37) return_expr -> .
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    SEMICOLON       reduce using rule 37 (return_expr -> .)
    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    return_expr                    shift and go to state 74
    expr                           shift and go to state 75
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 55

    (54) statement -> BREAK_KW . SEMICOLON

    SEMICOLON       shift and go to state 90


state 56

    (55) statement -> CONTINUE_KW . SEMICOLON

    SEMICOLON       shift and go to state 91


state 57

    (57) statement -> READ_KW . OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON

    OPENING_PARENTHESES shift and go to state 92


state 58

    (58) statement -> WRITE_KW . OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON

    OPENING_PARENTHESES shift and go to state 93


state 59

    (65) assignment -> location . EXP expr
    (66) assignment -> location .

    EXP             shift and go to state 94
    SEMICOLON       reduce using rule 66 (assignment -> location .)
    CLOSING_PARENTHESES reduce using rule 66 (assignment -> location .)


state 60

    (13) method_call -> CALLOUT_KW . OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES

    OPENING_PARENTHESES shift and go to state 95


state 61

    (39) var_decl_list -> var_decl var_decl_list .

    IF_KW           reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    WHILE_KW        reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    FOR_KW          reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    SWITCH_KW       reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    RETURN_KW       reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    BREAK_KW        reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    CONTINUE_KW     reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    READ_KW         reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    WRITE_KW        reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    SEMICOLON       reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    ID              reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    CALLOUT_KW      reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    OPENING_BRACE   reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)
    CLOSING_BRACE   reduce using rule 39 (var_decl_list -> var_decl var_decl_list .)


state 62

    (41) var_decl -> type id_list . SEMICOLON

    SEMICOLON       shift and go to state 96


state 63

    (42) id_list -> ID . COMMA id_list
    (43) id_list -> ID .

    COMMA           shift and go to state 97
    SEMICOLON       reduce using rule 43 (id_list -> ID .)


state 64

    (38) block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .

    VOID_KW         reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    INT_KW          reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    FLOAT_KW        reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    CHAR_KW         reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    BOOL_KW         reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    CLOSING_BRACE   reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    IF_KW           reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    WHILE_KW        reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    FOR_KW          reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    SWITCH_KW       reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    RETURN_KW       reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    BREAK_KW        reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    CONTINUE_KW     reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    READ_KW         reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    WRITE_KW        reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    SEMICOLON       reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    ID              reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    CALLOUT_KW      reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    OPENING_BRACE   reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    ELSE_KW         reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    CASE_KW         reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)
    DEFAULT_KW      reduce using rule 38 (block -> OPENING_BRACE var_decl_list statement_list CLOSING_BRACE .)


state 65

    (44) statement_list -> statement statement_list .

    CLOSING_BRACE   reduce using rule 44 (statement_list -> statement statement_list .)


state 66

    (46) statement -> assignment SEMICOLON .

    IF_KW           reduce using rule 46 (statement -> assignment SEMICOLON .)
    WHILE_KW        reduce using rule 46 (statement -> assignment SEMICOLON .)
    FOR_KW          reduce using rule 46 (statement -> assignment SEMICOLON .)
    SWITCH_KW       reduce using rule 46 (statement -> assignment SEMICOLON .)
    RETURN_KW       reduce using rule 46 (statement -> assignment SEMICOLON .)
    BREAK_KW        reduce using rule 46 (statement -> assignment SEMICOLON .)
    CONTINUE_KW     reduce using rule 46 (statement -> assignment SEMICOLON .)
    READ_KW         reduce using rule 46 (statement -> assignment SEMICOLON .)
    WRITE_KW        reduce using rule 46 (statement -> assignment SEMICOLON .)
    SEMICOLON       reduce using rule 46 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 46 (statement -> assignment SEMICOLON .)
    CALLOUT_KW      reduce using rule 46 (statement -> assignment SEMICOLON .)
    OPENING_BRACE   reduce using rule 46 (statement -> assignment SEMICOLON .)
    CLOSING_BRACE   reduce using rule 46 (statement -> assignment SEMICOLON .)
    CASE_KW         reduce using rule 46 (statement -> assignment SEMICOLON .)
    DEFAULT_KW      reduce using rule 46 (statement -> assignment SEMICOLON .)


state 67

    (47) statement -> method_call SEMICOLON .

    IF_KW           reduce using rule 47 (statement -> method_call SEMICOLON .)
    WHILE_KW        reduce using rule 47 (statement -> method_call SEMICOLON .)
    FOR_KW          reduce using rule 47 (statement -> method_call SEMICOLON .)
    SWITCH_KW       reduce using rule 47 (statement -> method_call SEMICOLON .)
    RETURN_KW       reduce using rule 47 (statement -> method_call SEMICOLON .)
    BREAK_KW        reduce using rule 47 (statement -> method_call SEMICOLON .)
    CONTINUE_KW     reduce using rule 47 (statement -> method_call SEMICOLON .)
    READ_KW         reduce using rule 47 (statement -> method_call SEMICOLON .)
    WRITE_KW        reduce using rule 47 (statement -> method_call SEMICOLON .)
    SEMICOLON       reduce using rule 47 (statement -> method_call SEMICOLON .)
    ID              reduce using rule 47 (statement -> method_call SEMICOLON .)
    CALLOUT_KW      reduce using rule 47 (statement -> method_call SEMICOLON .)
    OPENING_BRACE   reduce using rule 47 (statement -> method_call SEMICOLON .)
    CLOSING_BRACE   reduce using rule 47 (statement -> method_call SEMICOLON .)
    CASE_KW         reduce using rule 47 (statement -> method_call SEMICOLON .)
    DEFAULT_KW      reduce using rule 47 (statement -> method_call SEMICOLON .)


state 68

    (48) statement -> IF_KW OPENING_PARENTHESES . expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> IF_KW OPENING_PARENTHESES . expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 98
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 69

    (50) statement -> WHILE_KW OPENING_PARENTHESES . expr CLOSING_PARENTHESES block SEMICOLON
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 99
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 70

    (51) statement -> FOR_KW OPENING_PARENTHESES . for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (67) for_initialize -> . assignment
    (68) for_initialize -> .
    (65) assignment -> . location EXP expr
    (66) assignment -> . location
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET

    SEMICOLON       reduce using rule 68 (for_initialize -> .)
    ID              shift and go to state 102

    for_initialize                 shift and go to state 100
    assignment                     shift and go to state 101
    location                       shift and go to state 59

state 71

    (52) statement -> SWITCH_KW OPENING_PARENTHESES . ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON

    ID              shift and go to state 103


state 72

    (12) method_call -> ID OPENING_PARENTHESES . actual_parameters CLOSING_PARENTHESES
    (14) actual_parameters -> . actual_parameter_list
    (15) actual_parameters -> .
    (16) actual_parameter_list -> . expr COMMA actual_parameter_list
    (17) actual_parameter_list -> . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    CLOSING_PARENTHESES reduce using rule 15 (actual_parameters -> .)
    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    actual_parameters              shift and go to state 104
    actual_parameter_list          shift and go to state 105
    expr                           shift and go to state 106
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 73

    (70) location -> ID OPENING_BRACKET . expr CLOSING_BRACKET
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 107
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 74

    (53) statement -> RETURN_KW return_expr . SEMICOLON

    SEMICOLON       shift and go to state 108


state 75

    (36) return_expr -> expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    SEMICOLON       reduce using rule 36 (return_expr -> expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 76

    (71) expr -> location .

    LT              reduce using rule 71 (expr -> location .)
    LE              reduce using rule 71 (expr -> location .)
    GT              reduce using rule 71 (expr -> location .)
    GE              reduce using rule 71 (expr -> location .)
    EQ              reduce using rule 71 (expr -> location .)
    NE              reduce using rule 71 (expr -> location .)
    AND             reduce using rule 71 (expr -> location .)
    OR              reduce using rule 71 (expr -> location .)
    AND_THEN        reduce using rule 71 (expr -> location .)
    OR_ELSE         reduce using rule 71 (expr -> location .)
    PLUS            reduce using rule 71 (expr -> location .)
    MINUS           reduce using rule 71 (expr -> location .)
    DIV             reduce using rule 71 (expr -> location .)
    REM             reduce using rule 71 (expr -> location .)
    SEMICOLON       reduce using rule 71 (expr -> location .)
    CLOSING_PARENTHESES reduce using rule 71 (expr -> location .)
    COMMA           reduce using rule 71 (expr -> location .)
    CLOSING_BRACKET reduce using rule 71 (expr -> location .)


state 77

    (72) expr -> constant .

    LT              reduce using rule 72 (expr -> constant .)
    LE              reduce using rule 72 (expr -> constant .)
    GT              reduce using rule 72 (expr -> constant .)
    GE              reduce using rule 72 (expr -> constant .)
    EQ              reduce using rule 72 (expr -> constant .)
    NE              reduce using rule 72 (expr -> constant .)
    AND             reduce using rule 72 (expr -> constant .)
    OR              reduce using rule 72 (expr -> constant .)
    AND_THEN        reduce using rule 72 (expr -> constant .)
    OR_ELSE         reduce using rule 72 (expr -> constant .)
    PLUS            reduce using rule 72 (expr -> constant .)
    MINUS           reduce using rule 72 (expr -> constant .)
    DIV             reduce using rule 72 (expr -> constant .)
    REM             reduce using rule 72 (expr -> constant .)
    SEMICOLON       reduce using rule 72 (expr -> constant .)
    CLOSING_PARENTHESES reduce using rule 72 (expr -> constant .)
    COMMA           reduce using rule 72 (expr -> constant .)
    CLOSING_BRACKET reduce using rule 72 (expr -> constant .)


state 78

    (73) expr -> OPENING_PARENTHESES . expr CLOSING_PARENTHESES
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 123
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 79

    (74) expr -> method_call .

    LT              reduce using rule 74 (expr -> method_call .)
    LE              reduce using rule 74 (expr -> method_call .)
    GT              reduce using rule 74 (expr -> method_call .)
    GE              reduce using rule 74 (expr -> method_call .)
    EQ              reduce using rule 74 (expr -> method_call .)
    NE              reduce using rule 74 (expr -> method_call .)
    AND             reduce using rule 74 (expr -> method_call .)
    OR              reduce using rule 74 (expr -> method_call .)
    AND_THEN        reduce using rule 74 (expr -> method_call .)
    OR_ELSE         reduce using rule 74 (expr -> method_call .)
    PLUS            reduce using rule 74 (expr -> method_call .)
    MINUS           reduce using rule 74 (expr -> method_call .)
    DIV             reduce using rule 74 (expr -> method_call .)
    REM             reduce using rule 74 (expr -> method_call .)
    SEMICOLON       reduce using rule 74 (expr -> method_call .)
    CLOSING_PARENTHESES reduce using rule 74 (expr -> method_call .)
    COMMA           reduce using rule 74 (expr -> method_call .)
    CLOSING_BRACKET reduce using rule 74 (expr -> method_call .)


state 80

    (75) expr -> operational_expr .

    LT              reduce using rule 75 (expr -> operational_expr .)
    LE              reduce using rule 75 (expr -> operational_expr .)
    GT              reduce using rule 75 (expr -> operational_expr .)
    GE              reduce using rule 75 (expr -> operational_expr .)
    EQ              reduce using rule 75 (expr -> operational_expr .)
    NE              reduce using rule 75 (expr -> operational_expr .)
    AND             reduce using rule 75 (expr -> operational_expr .)
    OR              reduce using rule 75 (expr -> operational_expr .)
    AND_THEN        reduce using rule 75 (expr -> operational_expr .)
    OR_ELSE         reduce using rule 75 (expr -> operational_expr .)
    PLUS            reduce using rule 75 (expr -> operational_expr .)
    MINUS           reduce using rule 75 (expr -> operational_expr .)
    DIV             reduce using rule 75 (expr -> operational_expr .)
    REM             reduce using rule 75 (expr -> operational_expr .)
    SEMICOLON       reduce using rule 75 (expr -> operational_expr .)
    CLOSING_PARENTHESES reduce using rule 75 (expr -> operational_expr .)
    COMMA           reduce using rule 75 (expr -> operational_expr .)
    CLOSING_BRACKET reduce using rule 75 (expr -> operational_expr .)


state 81

    (69) location -> ID .
    (70) location -> ID . OPENING_BRACKET expr CLOSING_BRACKET
    (12) method_call -> ID . OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES

    LT              reduce using rule 69 (location -> ID .)
    LE              reduce using rule 69 (location -> ID .)
    GT              reduce using rule 69 (location -> ID .)
    GE              reduce using rule 69 (location -> ID .)
    EQ              reduce using rule 69 (location -> ID .)
    NE              reduce using rule 69 (location -> ID .)
    AND             reduce using rule 69 (location -> ID .)
    OR              reduce using rule 69 (location -> ID .)
    AND_THEN        reduce using rule 69 (location -> ID .)
    OR_ELSE         reduce using rule 69 (location -> ID .)
    PLUS            reduce using rule 69 (location -> ID .)
    MINUS           reduce using rule 69 (location -> ID .)
    DIV             reduce using rule 69 (location -> ID .)
    REM             reduce using rule 69 (location -> ID .)
    SEMICOLON       reduce using rule 69 (location -> ID .)
    CLOSING_PARENTHESES reduce using rule 69 (location -> ID .)
    COMMA           reduce using rule 69 (location -> ID .)
    CLOSING_BRACKET reduce using rule 69 (location -> ID .)
    OPENING_BRACKET shift and go to state 73
    OPENING_PARENTHESES shift and go to state 72


state 82

    (30) constant -> INT_CONSTANT .

    LT              reduce using rule 30 (constant -> INT_CONSTANT .)
    LE              reduce using rule 30 (constant -> INT_CONSTANT .)
    GT              reduce using rule 30 (constant -> INT_CONSTANT .)
    GE              reduce using rule 30 (constant -> INT_CONSTANT .)
    EQ              reduce using rule 30 (constant -> INT_CONSTANT .)
    NE              reduce using rule 30 (constant -> INT_CONSTANT .)
    AND             reduce using rule 30 (constant -> INT_CONSTANT .)
    OR              reduce using rule 30 (constant -> INT_CONSTANT .)
    AND_THEN        reduce using rule 30 (constant -> INT_CONSTANT .)
    OR_ELSE         reduce using rule 30 (constant -> INT_CONSTANT .)
    PLUS            reduce using rule 30 (constant -> INT_CONSTANT .)
    MINUS           reduce using rule 30 (constant -> INT_CONSTANT .)
    DIV             reduce using rule 30 (constant -> INT_CONSTANT .)
    REM             reduce using rule 30 (constant -> INT_CONSTANT .)
    SEMICOLON       reduce using rule 30 (constant -> INT_CONSTANT .)
    CLOSING_PARENTHESES reduce using rule 30 (constant -> INT_CONSTANT .)
    COMMA           reduce using rule 30 (constant -> INT_CONSTANT .)
    CLOSING_BRACKET reduce using rule 30 (constant -> INT_CONSTANT .)
    COLON           reduce using rule 30 (constant -> INT_CONSTANT .)


state 83

    (31) constant -> FLOAT_CONSTANT .

    LT              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    LE              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    GT              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    GE              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    EQ              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    NE              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    AND             reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    OR              reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    AND_THEN        reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    OR_ELSE         reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    PLUS            reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    MINUS           reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    DIV             reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    REM             reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    SEMICOLON       reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    CLOSING_PARENTHESES reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    COMMA           reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    CLOSING_BRACKET reduce using rule 31 (constant -> FLOAT_CONSTANT .)
    COLON           reduce using rule 31 (constant -> FLOAT_CONSTANT .)


state 84

    (32) constant -> CHAR_CONSTANT .

    LT              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    LE              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    GT              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    GE              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    EQ              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    NE              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    AND             reduce using rule 32 (constant -> CHAR_CONSTANT .)
    OR              reduce using rule 32 (constant -> CHAR_CONSTANT .)
    AND_THEN        reduce using rule 32 (constant -> CHAR_CONSTANT .)
    OR_ELSE         reduce using rule 32 (constant -> CHAR_CONSTANT .)
    PLUS            reduce using rule 32 (constant -> CHAR_CONSTANT .)
    MINUS           reduce using rule 32 (constant -> CHAR_CONSTANT .)
    DIV             reduce using rule 32 (constant -> CHAR_CONSTANT .)
    REM             reduce using rule 32 (constant -> CHAR_CONSTANT .)
    SEMICOLON       reduce using rule 32 (constant -> CHAR_CONSTANT .)
    CLOSING_PARENTHESES reduce using rule 32 (constant -> CHAR_CONSTANT .)
    COMMA           reduce using rule 32 (constant -> CHAR_CONSTANT .)
    CLOSING_BRACKET reduce using rule 32 (constant -> CHAR_CONSTANT .)
    COLON           reduce using rule 32 (constant -> CHAR_CONSTANT .)


state 85

    (33) constant -> BOOL_CONSTANT .

    LT              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    LE              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    GT              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    GE              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    EQ              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    NE              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    AND             reduce using rule 33 (constant -> BOOL_CONSTANT .)
    OR              reduce using rule 33 (constant -> BOOL_CONSTANT .)
    AND_THEN        reduce using rule 33 (constant -> BOOL_CONSTANT .)
    OR_ELSE         reduce using rule 33 (constant -> BOOL_CONSTANT .)
    PLUS            reduce using rule 33 (constant -> BOOL_CONSTANT .)
    MINUS           reduce using rule 33 (constant -> BOOL_CONSTANT .)
    DIV             reduce using rule 33 (constant -> BOOL_CONSTANT .)
    REM             reduce using rule 33 (constant -> BOOL_CONSTANT .)
    SEMICOLON       reduce using rule 33 (constant -> BOOL_CONSTANT .)
    CLOSING_PARENTHESES reduce using rule 33 (constant -> BOOL_CONSTANT .)
    COMMA           reduce using rule 33 (constant -> BOOL_CONSTANT .)
    CLOSING_BRACKET reduce using rule 33 (constant -> BOOL_CONSTANT .)
    COLON           reduce using rule 33 (constant -> BOOL_CONSTANT .)


state 86

    (92) operational_expr -> MINUS . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 124
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 87

    (90) operational_expr -> SHR . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 125
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 88

    (91) operational_expr -> SHL . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 126
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 89

    (93) operational_expr -> NOT . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 127
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 90

    (54) statement -> BREAK_KW SEMICOLON .

    IF_KW           reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    WHILE_KW        reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    FOR_KW          reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    SWITCH_KW       reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    RETURN_KW       reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    BREAK_KW        reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    READ_KW         reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    WRITE_KW        reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    SEMICOLON       reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    ID              reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    CALLOUT_KW      reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    CASE_KW         reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)
    DEFAULT_KW      reduce using rule 54 (statement -> BREAK_KW SEMICOLON .)


state 91

    (55) statement -> CONTINUE_KW SEMICOLON .

    IF_KW           reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    WHILE_KW        reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    FOR_KW          reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    SWITCH_KW       reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    RETURN_KW       reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    BREAK_KW        reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    CONTINUE_KW     reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    READ_KW         reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    WRITE_KW        reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    SEMICOLON       reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    ID              reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    CALLOUT_KW      reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    OPENING_BRACE   reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    CLOSING_BRACE   reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    CASE_KW         reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)
    DEFAULT_KW      reduce using rule 55 (statement -> CONTINUE_KW SEMICOLON .)


state 92

    (57) statement -> READ_KW OPENING_PARENTHESES . ID CLOSING_PARENTHESES SEMICOLON

    ID              shift and go to state 128


state 93

    (58) statement -> WRITE_KW OPENING_PARENTHESES . write_parameter CLOSING_PARENTHESES SEMICOLON
    (63) write_parameter -> . expr
    (64) write_parameter -> . STRING_CONSTANT
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    STRING_CONSTANT shift and go to state 131
    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    write_parameter                shift and go to state 129
    expr                           shift and go to state 130
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 94

    (65) assignment -> location EXP . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    location                       shift and go to state 76
    expr                           shift and go to state 132
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 95

    (13) method_call -> CALLOUT_KW OPENING_PARENTHESES . STRING_CONSTANT callout_parameters CLOSING_PARENTHESES

    STRING_CONSTANT shift and go to state 133


state 96

    (41) var_decl -> type id_list SEMICOLON .

    INT_KW          reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    FLOAT_KW        reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    CHAR_KW         reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    BOOL_KW         reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    IF_KW           reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    WHILE_KW        reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    FOR_KW          reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    SWITCH_KW       reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    RETURN_KW       reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    BREAK_KW        reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    CONTINUE_KW     reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    READ_KW         reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    WRITE_KW        reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    SEMICOLON       reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    ID              reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    CALLOUT_KW      reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    OPENING_BRACE   reduce using rule 41 (var_decl -> type id_list SEMICOLON .)
    CLOSING_BRACE   reduce using rule 41 (var_decl -> type id_list SEMICOLON .)


state 97

    (42) id_list -> ID COMMA . id_list
    (42) id_list -> . ID COMMA id_list
    (43) id_list -> . ID

    ID              shift and go to state 63

    id_list                        shift and go to state 134

state 98

    (48) statement -> IF_KW OPENING_PARENTHESES expr . CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> IF_KW OPENING_PARENTHESES expr . CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    CLOSING_PARENTHESES shift and go to state 135
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 99

    (50) statement -> WHILE_KW OPENING_PARENTHESES expr . CLOSING_PARENTHESES block SEMICOLON
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    CLOSING_PARENTHESES shift and go to state 136
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 100

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize . SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON

    SEMICOLON       shift and go to state 137


state 101

    (67) for_initialize -> assignment .

    SEMICOLON       reduce using rule 67 (for_initialize -> assignment .)


state 102

    (69) location -> ID .
    (70) location -> ID . OPENING_BRACKET expr CLOSING_BRACKET

    EXP             reduce using rule 69 (location -> ID .)
    SEMICOLON       reduce using rule 69 (location -> ID .)
    CLOSING_PARENTHESES reduce using rule 69 (location -> ID .)
    OPENING_BRACKET shift and go to state 73


state 103

    (52) statement -> SWITCH_KW OPENING_PARENTHESES ID . CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON

    CLOSING_PARENTHESES shift and go to state 138


state 104

    (12) method_call -> ID OPENING_PARENTHESES actual_parameters . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 139


state 105

    (14) actual_parameters -> actual_parameter_list .

    CLOSING_PARENTHESES reduce using rule 14 (actual_parameters -> actual_parameter_list .)


state 106

    (16) actual_parameter_list -> expr . COMMA actual_parameter_list
    (17) actual_parameter_list -> expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    COMMA           shift and go to state 140
    CLOSING_PARENTHESES reduce using rule 17 (actual_parameter_list -> expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 107

    (70) location -> ID OPENING_BRACKET expr . CLOSING_BRACKET
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    CLOSING_BRACKET shift and go to state 141
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 108

    (53) statement -> RETURN_KW return_expr SEMICOLON .

    IF_KW           reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    WHILE_KW        reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    FOR_KW          reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    SWITCH_KW       reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    RETURN_KW       reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    BREAK_KW        reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    CONTINUE_KW     reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    READ_KW         reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    WRITE_KW        reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    SEMICOLON       reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    ID              reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    CALLOUT_KW      reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    OPENING_BRACE   reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    CLOSING_BRACE   reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    CASE_KW         reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)
    DEFAULT_KW      reduce using rule 53 (statement -> RETURN_KW return_expr SEMICOLON .)


state 109

    (76) operational_expr -> expr LT . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 142
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 110

    (77) operational_expr -> expr LE . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 143
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 111

    (78) operational_expr -> expr GT . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 144
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 112

    (79) operational_expr -> expr GE . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 145
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 113

    (80) operational_expr -> expr EQ . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 146
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 114

    (81) operational_expr -> expr NE . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 147
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 115

    (82) operational_expr -> expr AND . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 148
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 116

    (83) operational_expr -> expr OR . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 149
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 117

    (84) operational_expr -> expr AND_THEN . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 150
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 118

    (85) operational_expr -> expr OR_ELSE . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 151
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 119

    (86) operational_expr -> expr PLUS . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 152
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 120

    (87) operational_expr -> expr MINUS . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 153
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 121

    (88) operational_expr -> expr DIV . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 154
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 122

    (89) operational_expr -> expr REM . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 155
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 123

    (73) expr -> OPENING_PARENTHESES expr . CLOSING_PARENTHESES
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    CLOSING_PARENTHESES shift and go to state 156
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 124

    (92) operational_expr -> MINUS expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 92 (operational_expr -> MINUS expr .)
    LE              reduce using rule 92 (operational_expr -> MINUS expr .)
    GT              reduce using rule 92 (operational_expr -> MINUS expr .)
    GE              reduce using rule 92 (operational_expr -> MINUS expr .)
    EQ              reduce using rule 92 (operational_expr -> MINUS expr .)
    NE              reduce using rule 92 (operational_expr -> MINUS expr .)
    AND             reduce using rule 92 (operational_expr -> MINUS expr .)
    OR              reduce using rule 92 (operational_expr -> MINUS expr .)
    AND_THEN        reduce using rule 92 (operational_expr -> MINUS expr .)
    OR_ELSE         reduce using rule 92 (operational_expr -> MINUS expr .)
    PLUS            reduce using rule 92 (operational_expr -> MINUS expr .)
    MINUS           reduce using rule 92 (operational_expr -> MINUS expr .)
    SEMICOLON       reduce using rule 92 (operational_expr -> MINUS expr .)
    CLOSING_PARENTHESES reduce using rule 92 (operational_expr -> MINUS expr .)
    COMMA           reduce using rule 92 (operational_expr -> MINUS expr .)
    CLOSING_BRACKET reduce using rule 92 (operational_expr -> MINUS expr .)
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! DIV             [ reduce using rule 92 (operational_expr -> MINUS expr .) ]
  ! REM             [ reduce using rule 92 (operational_expr -> MINUS expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]
  ! PLUS            [ shift and go to state 119 ]
  ! MINUS           [ shift and go to state 120 ]


state 125

    (90) operational_expr -> SHR expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_THEN resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REM resolved as shift
    SEMICOLON       reduce using rule 90 (operational_expr -> SHR expr .)
    CLOSING_PARENTHESES reduce using rule 90 (operational_expr -> SHR expr .)
    COMMA           reduce using rule 90 (operational_expr -> SHR expr .)
    CLOSING_BRACKET reduce using rule 90 (operational_expr -> SHR expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! LE              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! GT              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! GE              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! EQ              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! NE              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! AND             [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! OR              [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! AND_THEN        [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! OR_ELSE         [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! PLUS            [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! MINUS           [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! DIV             [ reduce using rule 90 (operational_expr -> SHR expr .) ]
  ! REM             [ reduce using rule 90 (operational_expr -> SHR expr .) ]


state 126

    (91) operational_expr -> SHL expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_THEN resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REM resolved as shift
    SEMICOLON       reduce using rule 91 (operational_expr -> SHL expr .)
    CLOSING_PARENTHESES reduce using rule 91 (operational_expr -> SHL expr .)
    COMMA           reduce using rule 91 (operational_expr -> SHL expr .)
    CLOSING_BRACKET reduce using rule 91 (operational_expr -> SHL expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! LE              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! GT              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! GE              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! EQ              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! NE              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! AND             [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! OR              [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! AND_THEN        [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! OR_ELSE         [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! PLUS            [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! MINUS           [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! DIV             [ reduce using rule 91 (operational_expr -> SHL expr .) ]
  ! REM             [ reduce using rule 91 (operational_expr -> SHL expr .) ]


state 127

    (93) operational_expr -> NOT expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 93 (operational_expr -> NOT expr .)
    LE              reduce using rule 93 (operational_expr -> NOT expr .)
    GT              reduce using rule 93 (operational_expr -> NOT expr .)
    GE              reduce using rule 93 (operational_expr -> NOT expr .)
    EQ              reduce using rule 93 (operational_expr -> NOT expr .)
    NE              reduce using rule 93 (operational_expr -> NOT expr .)
    AND             reduce using rule 93 (operational_expr -> NOT expr .)
    OR              reduce using rule 93 (operational_expr -> NOT expr .)
    AND_THEN        reduce using rule 93 (operational_expr -> NOT expr .)
    OR_ELSE         reduce using rule 93 (operational_expr -> NOT expr .)
    PLUS            reduce using rule 93 (operational_expr -> NOT expr .)
    MINUS           reduce using rule 93 (operational_expr -> NOT expr .)
    DIV             reduce using rule 93 (operational_expr -> NOT expr .)
    REM             reduce using rule 93 (operational_expr -> NOT expr .)
    SEMICOLON       reduce using rule 93 (operational_expr -> NOT expr .)
    CLOSING_PARENTHESES reduce using rule 93 (operational_expr -> NOT expr .)
    COMMA           reduce using rule 93 (operational_expr -> NOT expr .)
    CLOSING_BRACKET reduce using rule 93 (operational_expr -> NOT expr .)

  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]
  ! PLUS            [ shift and go to state 119 ]
  ! MINUS           [ shift and go to state 120 ]
  ! DIV             [ shift and go to state 121 ]
  ! REM             [ shift and go to state 122 ]


state 128

    (57) statement -> READ_KW OPENING_PARENTHESES ID . CLOSING_PARENTHESES SEMICOLON

    CLOSING_PARENTHESES shift and go to state 157


state 129

    (58) statement -> WRITE_KW OPENING_PARENTHESES write_parameter . CLOSING_PARENTHESES SEMICOLON

    CLOSING_PARENTHESES shift and go to state 158


state 130

    (63) write_parameter -> expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    CLOSING_PARENTHESES reduce using rule 63 (write_parameter -> expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 131

    (64) write_parameter -> STRING_CONSTANT .

    CLOSING_PARENTHESES reduce using rule 64 (write_parameter -> STRING_CONSTANT .)


state 132

    (65) assignment -> location EXP expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    SEMICOLON       reduce using rule 65 (assignment -> location EXP expr .)
    CLOSING_PARENTHESES reduce using rule 65 (assignment -> location EXP expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 133

    (13) method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT . callout_parameters CLOSING_PARENTHESES
    (18) callout_parameters -> . COMMA callout_parameter_list
    (19) callout_parameters -> . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    COMMA           shift and go to state 160
    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    callout_parameters             shift and go to state 159
    expr                           shift and go to state 161
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 134

    (42) id_list -> ID COMMA id_list .

    SEMICOLON       reduce using rule 42 (id_list -> ID COMMA id_list .)


state 135

    (48) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES . THEN_KW block SEMICOLON
    (49) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES . THEN_KW block ELSE_KW block SEMICOLON

    THEN_KW         shift and go to state 162


state 136

    (50) statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES . block SEMICOLON
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE

    OPENING_BRACE   shift and go to state 37

    block                          shift and go to state 163

state 137

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON . expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 164
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 138

    (52) statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES . OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON

    OPENING_BRACE   shift and go to state 165


state 139

    (12) method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    LT              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    LE              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    GT              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    GE              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    EQ              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    NE              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    AND             reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    OR              reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    AND_THEN        reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    OR_ELSE         reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    PLUS            reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    MINUS           reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    DIV             reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    REM             reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    COMMA           reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 12 (method_call -> ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES .)


state 140

    (16) actual_parameter_list -> expr COMMA . actual_parameter_list
    (16) actual_parameter_list -> . expr COMMA actual_parameter_list
    (17) actual_parameter_list -> . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 106
    actual_parameter_list          shift and go to state 166
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 141

    (70) location -> ID OPENING_BRACKET expr CLOSING_BRACKET .

    EXP             reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    SEMICOLON       reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    LT              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    LE              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    GT              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    GE              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    EQ              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    NE              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    AND             reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    OR              reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    AND_THEN        reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    OR_ELSE         reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    PLUS            reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    MINUS           reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    DIV             reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    REM             reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    CLOSING_PARENTHESES reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    COMMA           reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)
    CLOSING_BRACKET reduce using rule 70 (location -> ID OPENING_BRACKET expr CLOSING_BRACKET .)


state 142

    (76) operational_expr -> expr LT expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 76 (operational_expr -> expr LT expr .)
    LE              reduce using rule 76 (operational_expr -> expr LT expr .)
    GT              reduce using rule 76 (operational_expr -> expr LT expr .)
    GE              reduce using rule 76 (operational_expr -> expr LT expr .)
    EQ              reduce using rule 76 (operational_expr -> expr LT expr .)
    NE              reduce using rule 76 (operational_expr -> expr LT expr .)
    AND             reduce using rule 76 (operational_expr -> expr LT expr .)
    OR              reduce using rule 76 (operational_expr -> expr LT expr .)
    AND_THEN        reduce using rule 76 (operational_expr -> expr LT expr .)
    OR_ELSE         reduce using rule 76 (operational_expr -> expr LT expr .)
    SEMICOLON       reduce using rule 76 (operational_expr -> expr LT expr .)
    CLOSING_PARENTHESES reduce using rule 76 (operational_expr -> expr LT expr .)
    COMMA           reduce using rule 76 (operational_expr -> expr LT expr .)
    CLOSING_BRACKET reduce using rule 76 (operational_expr -> expr LT expr .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! PLUS            [ reduce using rule 76 (operational_expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 76 (operational_expr -> expr LT expr .) ]
  ! DIV             [ reduce using rule 76 (operational_expr -> expr LT expr .) ]
  ! REM             [ reduce using rule 76 (operational_expr -> expr LT expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 143

    (77) operational_expr -> expr LE expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 77 (operational_expr -> expr LE expr .)
    LE              reduce using rule 77 (operational_expr -> expr LE expr .)
    GT              reduce using rule 77 (operational_expr -> expr LE expr .)
    GE              reduce using rule 77 (operational_expr -> expr LE expr .)
    EQ              reduce using rule 77 (operational_expr -> expr LE expr .)
    NE              reduce using rule 77 (operational_expr -> expr LE expr .)
    AND             reduce using rule 77 (operational_expr -> expr LE expr .)
    OR              reduce using rule 77 (operational_expr -> expr LE expr .)
    AND_THEN        reduce using rule 77 (operational_expr -> expr LE expr .)
    OR_ELSE         reduce using rule 77 (operational_expr -> expr LE expr .)
    SEMICOLON       reduce using rule 77 (operational_expr -> expr LE expr .)
    CLOSING_PARENTHESES reduce using rule 77 (operational_expr -> expr LE expr .)
    COMMA           reduce using rule 77 (operational_expr -> expr LE expr .)
    CLOSING_BRACKET reduce using rule 77 (operational_expr -> expr LE expr .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! PLUS            [ reduce using rule 77 (operational_expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 77 (operational_expr -> expr LE expr .) ]
  ! DIV             [ reduce using rule 77 (operational_expr -> expr LE expr .) ]
  ! REM             [ reduce using rule 77 (operational_expr -> expr LE expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 144

    (78) operational_expr -> expr GT expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 78 (operational_expr -> expr GT expr .)
    LE              reduce using rule 78 (operational_expr -> expr GT expr .)
    GT              reduce using rule 78 (operational_expr -> expr GT expr .)
    GE              reduce using rule 78 (operational_expr -> expr GT expr .)
    EQ              reduce using rule 78 (operational_expr -> expr GT expr .)
    NE              reduce using rule 78 (operational_expr -> expr GT expr .)
    AND             reduce using rule 78 (operational_expr -> expr GT expr .)
    OR              reduce using rule 78 (operational_expr -> expr GT expr .)
    AND_THEN        reduce using rule 78 (operational_expr -> expr GT expr .)
    OR_ELSE         reduce using rule 78 (operational_expr -> expr GT expr .)
    SEMICOLON       reduce using rule 78 (operational_expr -> expr GT expr .)
    CLOSING_PARENTHESES reduce using rule 78 (operational_expr -> expr GT expr .)
    COMMA           reduce using rule 78 (operational_expr -> expr GT expr .)
    CLOSING_BRACKET reduce using rule 78 (operational_expr -> expr GT expr .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! PLUS            [ reduce using rule 78 (operational_expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 78 (operational_expr -> expr GT expr .) ]
  ! DIV             [ reduce using rule 78 (operational_expr -> expr GT expr .) ]
  ! REM             [ reduce using rule 78 (operational_expr -> expr GT expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 145

    (79) operational_expr -> expr GE expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 79 (operational_expr -> expr GE expr .)
    LE              reduce using rule 79 (operational_expr -> expr GE expr .)
    GT              reduce using rule 79 (operational_expr -> expr GE expr .)
    GE              reduce using rule 79 (operational_expr -> expr GE expr .)
    EQ              reduce using rule 79 (operational_expr -> expr GE expr .)
    NE              reduce using rule 79 (operational_expr -> expr GE expr .)
    AND             reduce using rule 79 (operational_expr -> expr GE expr .)
    OR              reduce using rule 79 (operational_expr -> expr GE expr .)
    AND_THEN        reduce using rule 79 (operational_expr -> expr GE expr .)
    OR_ELSE         reduce using rule 79 (operational_expr -> expr GE expr .)
    SEMICOLON       reduce using rule 79 (operational_expr -> expr GE expr .)
    CLOSING_PARENTHESES reduce using rule 79 (operational_expr -> expr GE expr .)
    COMMA           reduce using rule 79 (operational_expr -> expr GE expr .)
    CLOSING_BRACKET reduce using rule 79 (operational_expr -> expr GE expr .)
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! PLUS            [ reduce using rule 79 (operational_expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 79 (operational_expr -> expr GE expr .) ]
  ! DIV             [ reduce using rule 79 (operational_expr -> expr GE expr .) ]
  ! REM             [ reduce using rule 79 (operational_expr -> expr GE expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 146

    (80) operational_expr -> expr EQ expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    EQ              reduce using rule 80 (operational_expr -> expr EQ expr .)
    NE              reduce using rule 80 (operational_expr -> expr EQ expr .)
    AND             reduce using rule 80 (operational_expr -> expr EQ expr .)
    OR              reduce using rule 80 (operational_expr -> expr EQ expr .)
    AND_THEN        reduce using rule 80 (operational_expr -> expr EQ expr .)
    OR_ELSE         reduce using rule 80 (operational_expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 80 (operational_expr -> expr EQ expr .)
    CLOSING_PARENTHESES reduce using rule 80 (operational_expr -> expr EQ expr .)
    COMMA           reduce using rule 80 (operational_expr -> expr EQ expr .)
    CLOSING_BRACKET reduce using rule 80 (operational_expr -> expr EQ expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! REM             [ reduce using rule 80 (operational_expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 147

    (81) operational_expr -> expr NE expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_THEN resolved as shift
  ! shift/reduce conflict for OR_ELSE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for REM resolved as shift
    SEMICOLON       reduce using rule 81 (operational_expr -> expr NE expr .)
    CLOSING_PARENTHESES reduce using rule 81 (operational_expr -> expr NE expr .)
    COMMA           reduce using rule 81 (operational_expr -> expr NE expr .)
    CLOSING_BRACKET reduce using rule 81 (operational_expr -> expr NE expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! AND             [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! OR              [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! AND_THEN        [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! OR_ELSE         [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! DIV             [ reduce using rule 81 (operational_expr -> expr NE expr .) ]
  ! REM             [ reduce using rule 81 (operational_expr -> expr NE expr .) ]


state 148

    (82) operational_expr -> expr AND expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    NE              reduce using rule 82 (operational_expr -> expr AND expr .)
    AND             reduce using rule 82 (operational_expr -> expr AND expr .)
    OR              reduce using rule 82 (operational_expr -> expr AND expr .)
    AND_THEN        reduce using rule 82 (operational_expr -> expr AND expr .)
    OR_ELSE         reduce using rule 82 (operational_expr -> expr AND expr .)
    SEMICOLON       reduce using rule 82 (operational_expr -> expr AND expr .)
    CLOSING_PARENTHESES reduce using rule 82 (operational_expr -> expr AND expr .)
    COMMA           reduce using rule 82 (operational_expr -> expr AND expr .)
    CLOSING_BRACKET reduce using rule 82 (operational_expr -> expr AND expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! DIV             [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! REM             [ reduce using rule 82 (operational_expr -> expr AND expr .) ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 149

    (83) operational_expr -> expr OR expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    NE              reduce using rule 83 (operational_expr -> expr OR expr .)
    OR              reduce using rule 83 (operational_expr -> expr OR expr .)
    OR_ELSE         reduce using rule 83 (operational_expr -> expr OR expr .)
    SEMICOLON       reduce using rule 83 (operational_expr -> expr OR expr .)
    CLOSING_PARENTHESES reduce using rule 83 (operational_expr -> expr OR expr .)
    COMMA           reduce using rule 83 (operational_expr -> expr OR expr .)
    CLOSING_BRACKET reduce using rule 83 (operational_expr -> expr OR expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    AND             shift and go to state 115
    AND_THEN        shift and go to state 117
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! AND_THEN        [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! REM             [ reduce using rule 83 (operational_expr -> expr OR expr .) ]
  ! NE              [ shift and go to state 114 ]
  ! OR              [ shift and go to state 116 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 150

    (84) operational_expr -> expr AND_THEN expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    NE              reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    AND             reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    OR              reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    AND_THEN        reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    OR_ELSE         reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    SEMICOLON       reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    CLOSING_PARENTHESES reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    COMMA           reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    CLOSING_BRACKET reduce using rule 84 (operational_expr -> expr AND_THEN expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! LE              [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! GT              [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! GE              [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! EQ              [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! PLUS            [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! MINUS           [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! DIV             [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! REM             [ reduce using rule 84 (operational_expr -> expr AND_THEN expr .) ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 151

    (85) operational_expr -> expr OR_ELSE expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    NE              reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    OR              reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    OR_ELSE         reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    SEMICOLON       reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    CLOSING_PARENTHESES reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    COMMA           reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    CLOSING_BRACKET reduce using rule 85 (operational_expr -> expr OR_ELSE expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    AND             shift and go to state 115
    AND_THEN        shift and go to state 117
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! LT              [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! LE              [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! GT              [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! GE              [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! EQ              [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! AND             [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! AND_THEN        [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! PLUS            [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! MINUS           [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! DIV             [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! REM             [ reduce using rule 85 (operational_expr -> expr OR_ELSE expr .) ]
  ! NE              [ shift and go to state 114 ]
  ! OR              [ shift and go to state 116 ]
  ! OR_ELSE         [ shift and go to state 118 ]


state 152

    (86) operational_expr -> expr PLUS expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    LE              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    GT              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    GE              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    EQ              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    NE              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    AND             reduce using rule 86 (operational_expr -> expr PLUS expr .)
    OR              reduce using rule 86 (operational_expr -> expr PLUS expr .)
    AND_THEN        reduce using rule 86 (operational_expr -> expr PLUS expr .)
    OR_ELSE         reduce using rule 86 (operational_expr -> expr PLUS expr .)
    PLUS            reduce using rule 86 (operational_expr -> expr PLUS expr .)
    MINUS           reduce using rule 86 (operational_expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 86 (operational_expr -> expr PLUS expr .)
    CLOSING_PARENTHESES reduce using rule 86 (operational_expr -> expr PLUS expr .)
    COMMA           reduce using rule 86 (operational_expr -> expr PLUS expr .)
    CLOSING_BRACKET reduce using rule 86 (operational_expr -> expr PLUS expr .)
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! DIV             [ reduce using rule 86 (operational_expr -> expr PLUS expr .) ]
  ! REM             [ reduce using rule 86 (operational_expr -> expr PLUS expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]
  ! PLUS            [ shift and go to state 119 ]
  ! MINUS           [ shift and go to state 120 ]


state 153

    (87) operational_expr -> expr MINUS expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    LE              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    GT              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    GE              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    EQ              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    NE              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    AND             reduce using rule 87 (operational_expr -> expr MINUS expr .)
    OR              reduce using rule 87 (operational_expr -> expr MINUS expr .)
    AND_THEN        reduce using rule 87 (operational_expr -> expr MINUS expr .)
    OR_ELSE         reduce using rule 87 (operational_expr -> expr MINUS expr .)
    PLUS            reduce using rule 87 (operational_expr -> expr MINUS expr .)
    MINUS           reduce using rule 87 (operational_expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 87 (operational_expr -> expr MINUS expr .)
    CLOSING_PARENTHESES reduce using rule 87 (operational_expr -> expr MINUS expr .)
    COMMA           reduce using rule 87 (operational_expr -> expr MINUS expr .)
    CLOSING_BRACKET reduce using rule 87 (operational_expr -> expr MINUS expr .)
    DIV             shift and go to state 121
    REM             shift and go to state 122

  ! DIV             [ reduce using rule 87 (operational_expr -> expr MINUS expr .) ]
  ! REM             [ reduce using rule 87 (operational_expr -> expr MINUS expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]
  ! PLUS            [ shift and go to state 119 ]
  ! MINUS           [ shift and go to state 120 ]


state 154

    (88) operational_expr -> expr DIV expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 88 (operational_expr -> expr DIV expr .)
    LE              reduce using rule 88 (operational_expr -> expr DIV expr .)
    GT              reduce using rule 88 (operational_expr -> expr DIV expr .)
    GE              reduce using rule 88 (operational_expr -> expr DIV expr .)
    EQ              reduce using rule 88 (operational_expr -> expr DIV expr .)
    NE              reduce using rule 88 (operational_expr -> expr DIV expr .)
    AND             reduce using rule 88 (operational_expr -> expr DIV expr .)
    OR              reduce using rule 88 (operational_expr -> expr DIV expr .)
    AND_THEN        reduce using rule 88 (operational_expr -> expr DIV expr .)
    OR_ELSE         reduce using rule 88 (operational_expr -> expr DIV expr .)
    PLUS            reduce using rule 88 (operational_expr -> expr DIV expr .)
    MINUS           reduce using rule 88 (operational_expr -> expr DIV expr .)
    DIV             reduce using rule 88 (operational_expr -> expr DIV expr .)
    REM             reduce using rule 88 (operational_expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 88 (operational_expr -> expr DIV expr .)
    CLOSING_PARENTHESES reduce using rule 88 (operational_expr -> expr DIV expr .)
    COMMA           reduce using rule 88 (operational_expr -> expr DIV expr .)
    CLOSING_BRACKET reduce using rule 88 (operational_expr -> expr DIV expr .)

  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]
  ! PLUS            [ shift and go to state 119 ]
  ! MINUS           [ shift and go to state 120 ]
  ! DIV             [ shift and go to state 121 ]
  ! REM             [ shift and go to state 122 ]


state 155

    (89) operational_expr -> expr REM expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    LT              reduce using rule 89 (operational_expr -> expr REM expr .)
    LE              reduce using rule 89 (operational_expr -> expr REM expr .)
    GT              reduce using rule 89 (operational_expr -> expr REM expr .)
    GE              reduce using rule 89 (operational_expr -> expr REM expr .)
    EQ              reduce using rule 89 (operational_expr -> expr REM expr .)
    NE              reduce using rule 89 (operational_expr -> expr REM expr .)
    AND             reduce using rule 89 (operational_expr -> expr REM expr .)
    OR              reduce using rule 89 (operational_expr -> expr REM expr .)
    AND_THEN        reduce using rule 89 (operational_expr -> expr REM expr .)
    OR_ELSE         reduce using rule 89 (operational_expr -> expr REM expr .)
    PLUS            reduce using rule 89 (operational_expr -> expr REM expr .)
    MINUS           reduce using rule 89 (operational_expr -> expr REM expr .)
    REM             reduce using rule 89 (operational_expr -> expr REM expr .)
    SEMICOLON       reduce using rule 89 (operational_expr -> expr REM expr .)
    CLOSING_PARENTHESES reduce using rule 89 (operational_expr -> expr REM expr .)
    COMMA           reduce using rule 89 (operational_expr -> expr REM expr .)
    CLOSING_BRACKET reduce using rule 89 (operational_expr -> expr REM expr .)
    DIV             shift and go to state 121

  ! DIV             [ reduce using rule 89 (operational_expr -> expr REM expr .) ]
  ! LT              [ shift and go to state 109 ]
  ! LE              [ shift and go to state 110 ]
  ! GT              [ shift and go to state 111 ]
  ! GE              [ shift and go to state 112 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 114 ]
  ! AND             [ shift and go to state 115 ]
  ! OR              [ shift and go to state 116 ]
  ! AND_THEN        [ shift and go to state 117 ]
  ! OR_ELSE         [ shift and go to state 118 ]
  ! PLUS            [ shift and go to state 119 ]
  ! MINUS           [ shift and go to state 120 ]
  ! REM             [ shift and go to state 122 ]


state 156

    (73) expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .

    LT              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    LE              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    GT              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    GE              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    EQ              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    NE              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    AND             reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    OR              reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    AND_THEN        reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    OR_ELSE         reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    PLUS            reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    MINUS           reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    DIV             reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    REM             reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    SEMICOLON       reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    COMMA           reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 73 (expr -> OPENING_PARENTHESES expr CLOSING_PARENTHESES .)


state 157

    (57) statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES . SEMICOLON

    SEMICOLON       shift and go to state 167


state 158

    (58) statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES . SEMICOLON

    SEMICOLON       shift and go to state 168


state 159

    (13) method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters . CLOSING_PARENTHESES

    CLOSING_PARENTHESES shift and go to state 169


state 160

    (18) callout_parameters -> COMMA . callout_parameter_list
    (20) callout_parameter_list -> . expr COMMA callout_parameter_list
    (21) callout_parameter_list -> . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    callout_parameter_list         shift and go to state 170
    expr                           shift and go to state 171
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 161

    (19) callout_parameters -> expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    CLOSING_PARENTHESES reduce using rule 19 (callout_parameters -> expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 162

    (48) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW . block SEMICOLON
    (49) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW . block ELSE_KW block SEMICOLON
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE

    OPENING_BRACE   shift and go to state 37

    block                          shift and go to state 172

state 163

    (50) statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block . SEMICOLON

    SEMICOLON       shift and go to state 173


state 164

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr . SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    SEMICOLON       shift and go to state 174
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 165

    (52) statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE . case_statements CLOSING_BRACE SEMICOLON
    (60) case_statements -> . CASE_KW constant COLON statement case_statements
    (61) case_statements -> . DEFAULT_KW COLON statement
    (62) case_statements -> .

    CASE_KW         shift and go to state 176
    DEFAULT_KW      shift and go to state 177
    CLOSING_BRACE   reduce using rule 62 (case_statements -> .)

    case_statements                shift and go to state 175

state 166

    (16) actual_parameter_list -> expr COMMA actual_parameter_list .

    CLOSING_PARENTHESES reduce using rule 16 (actual_parameter_list -> expr COMMA actual_parameter_list .)


state 167

    (57) statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .

    IF_KW           reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    WHILE_KW        reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    FOR_KW          reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    SWITCH_KW       reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    RETURN_KW       reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    BREAK_KW        reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    CONTINUE_KW     reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    READ_KW         reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    WRITE_KW        reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    SEMICOLON       reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    ID              reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    CALLOUT_KW      reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    OPENING_BRACE   reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    CLOSING_BRACE   reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    CASE_KW         reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)
    DEFAULT_KW      reduce using rule 57 (statement -> READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON .)


state 168

    (58) statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .

    IF_KW           reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    WHILE_KW        reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    FOR_KW          reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    SWITCH_KW       reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    RETURN_KW       reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    BREAK_KW        reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    CONTINUE_KW     reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    READ_KW         reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    WRITE_KW        reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    SEMICOLON       reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    ID              reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    CALLOUT_KW      reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    OPENING_BRACE   reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    CLOSING_BRACE   reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    CASE_KW         reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)
    DEFAULT_KW      reduce using rule 58 (statement -> WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON .)


state 169

    (13) method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .

    SEMICOLON       reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    LT              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    LE              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    GT              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    GE              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    EQ              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    NE              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    AND             reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    OR              reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    AND_THEN        reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    OR_ELSE         reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    PLUS            reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    MINUS           reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    DIV             reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    REM             reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    CLOSING_PARENTHESES reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    COMMA           reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)
    CLOSING_BRACKET reduce using rule 13 (method_call -> CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES .)


state 170

    (18) callout_parameters -> COMMA callout_parameter_list .

    CLOSING_PARENTHESES reduce using rule 18 (callout_parameters -> COMMA callout_parameter_list .)


state 171

    (20) callout_parameter_list -> expr . COMMA callout_parameter_list
    (21) callout_parameter_list -> expr .
    (76) operational_expr -> expr . LT expr
    (77) operational_expr -> expr . LE expr
    (78) operational_expr -> expr . GT expr
    (79) operational_expr -> expr . GE expr
    (80) operational_expr -> expr . EQ expr
    (81) operational_expr -> expr . NE expr
    (82) operational_expr -> expr . AND expr
    (83) operational_expr -> expr . OR expr
    (84) operational_expr -> expr . AND_THEN expr
    (85) operational_expr -> expr . OR_ELSE expr
    (86) operational_expr -> expr . PLUS expr
    (87) operational_expr -> expr . MINUS expr
    (88) operational_expr -> expr . DIV expr
    (89) operational_expr -> expr . REM expr

    COMMA           shift and go to state 178
    CLOSING_PARENTHESES reduce using rule 21 (callout_parameter_list -> expr .)
    LT              shift and go to state 109
    LE              shift and go to state 110
    GT              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114
    AND             shift and go to state 115
    OR              shift and go to state 116
    AND_THEN        shift and go to state 117
    OR_ELSE         shift and go to state 118
    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    DIV             shift and go to state 121
    REM             shift and go to state 122


state 172

    (48) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block . SEMICOLON
    (49) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block . ELSE_KW block SEMICOLON

    SEMICOLON       shift and go to state 179
    ELSE_KW         shift and go to state 180


state 173

    (50) statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .

    IF_KW           reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    WHILE_KW        reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    FOR_KW          reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    SWITCH_KW       reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    RETURN_KW       reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    BREAK_KW        reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    CONTINUE_KW     reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    READ_KW         reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    WRITE_KW        reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    SEMICOLON       reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    ID              reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    CALLOUT_KW      reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    OPENING_BRACE   reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    CLOSING_BRACE   reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    CASE_KW         reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)
    DEFAULT_KW      reduce using rule 50 (statement -> WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON .)


state 174

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON . assignment CLOSING_PARENTHESES block SEMICOLON
    (65) assignment -> . location EXP expr
    (66) assignment -> . location
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET

    ID              shift and go to state 102

    assignment                     shift and go to state 181
    location                       shift and go to state 59

state 175

    (52) statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements . CLOSING_BRACE SEMICOLON

    CLOSING_BRACE   shift and go to state 182


state 176

    (60) case_statements -> CASE_KW . constant COLON statement case_statements
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT

    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85

    constant                       shift and go to state 183

state 177

    (61) case_statements -> DEFAULT_KW . COLON statement

    COLON           shift and go to state 184


state 178

    (20) callout_parameter_list -> expr COMMA . callout_parameter_list
    (20) callout_parameter_list -> . expr COMMA callout_parameter_list
    (21) callout_parameter_list -> . expr
    (71) expr -> . location
    (72) expr -> . constant
    (73) expr -> . OPENING_PARENTHESES expr CLOSING_PARENTHESES
    (74) expr -> . method_call
    (75) expr -> . operational_expr
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET
    (30) constant -> . INT_CONSTANT
    (31) constant -> . FLOAT_CONSTANT
    (32) constant -> . CHAR_CONSTANT
    (33) constant -> . BOOL_CONSTANT
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (76) operational_expr -> . expr LT expr
    (77) operational_expr -> . expr LE expr
    (78) operational_expr -> . expr GT expr
    (79) operational_expr -> . expr GE expr
    (80) operational_expr -> . expr EQ expr
    (81) operational_expr -> . expr NE expr
    (82) operational_expr -> . expr AND expr
    (83) operational_expr -> . expr OR expr
    (84) operational_expr -> . expr AND_THEN expr
    (85) operational_expr -> . expr OR_ELSE expr
    (86) operational_expr -> . expr PLUS expr
    (87) operational_expr -> . expr MINUS expr
    (88) operational_expr -> . expr DIV expr
    (89) operational_expr -> . expr REM expr
    (90) operational_expr -> . SHR expr
    (91) operational_expr -> . SHL expr
    (92) operational_expr -> . MINUS expr
    (93) operational_expr -> . NOT expr

    OPENING_PARENTHESES shift and go to state 78
    ID              shift and go to state 81
    INT_CONSTANT    shift and go to state 82
    FLOAT_CONSTANT  shift and go to state 83
    CHAR_CONSTANT   shift and go to state 84
    BOOL_CONSTANT   shift and go to state 85
    CALLOUT_KW      shift and go to state 60
    SHR             shift and go to state 87
    SHL             shift and go to state 88
    MINUS           shift and go to state 86
    NOT             shift and go to state 89

    expr                           shift and go to state 171
    callout_parameter_list         shift and go to state 185
    location                       shift and go to state 76
    constant                       shift and go to state 77
    method_call                    shift and go to state 79
    operational_expr               shift and go to state 80

state 179

    (48) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .

    IF_KW           reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    WHILE_KW        reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    FOR_KW          reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    SWITCH_KW       reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    RETURN_KW       reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    BREAK_KW        reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    CONTINUE_KW     reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    READ_KW         reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    WRITE_KW        reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    SEMICOLON       reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    ID              reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    CALLOUT_KW      reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    OPENING_BRACE   reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    CLOSING_BRACE   reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    CASE_KW         reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)
    DEFAULT_KW      reduce using rule 48 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON .)


state 180

    (49) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW . block SEMICOLON
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE

    OPENING_BRACE   shift and go to state 37

    block                          shift and go to state 186

state 181

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment . CLOSING_PARENTHESES block SEMICOLON

    CLOSING_PARENTHESES shift and go to state 187


state 182

    (52) statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE . SEMICOLON

    SEMICOLON       shift and go to state 188


state 183

    (60) case_statements -> CASE_KW constant . COLON statement case_statements

    COLON           shift and go to state 189


state 184

    (61) case_statements -> DEFAULT_KW COLON . statement
    (46) statement -> . assignment SEMICOLON
    (47) statement -> . method_call SEMICOLON
    (48) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
    (50) statement -> . WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON
    (51) statement -> . FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (52) statement -> . SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON
    (53) statement -> . RETURN_KW return_expr SEMICOLON
    (54) statement -> . BREAK_KW SEMICOLON
    (55) statement -> . CONTINUE_KW SEMICOLON
    (56) statement -> . block
    (57) statement -> . READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON
    (58) statement -> . WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON
    (59) statement -> . SEMICOLON
    (65) assignment -> . location EXP expr
    (66) assignment -> . location
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET

    IF_KW           shift and go to state 48
    WHILE_KW        shift and go to state 50
    FOR_KW          shift and go to state 51
    SWITCH_KW       shift and go to state 52
    RETURN_KW       shift and go to state 54
    BREAK_KW        shift and go to state 55
    CONTINUE_KW     shift and go to state 56
    READ_KW         shift and go to state 57
    WRITE_KW        shift and go to state 58
    SEMICOLON       shift and go to state 46
    ID              shift and go to state 53
    CALLOUT_KW      shift and go to state 60
    OPENING_BRACE   shift and go to state 37

    statement                      shift and go to state 190
    assignment                     shift and go to state 45
    method_call                    shift and go to state 47
    block                          shift and go to state 49
    location                       shift and go to state 59

state 185

    (20) callout_parameter_list -> expr COMMA callout_parameter_list .

    CLOSING_PARENTHESES reduce using rule 20 (callout_parameter_list -> expr COMMA callout_parameter_list .)


state 186

    (49) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block . SEMICOLON

    SEMICOLON       shift and go to state 191


state 187

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES . block SEMICOLON
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE

    OPENING_BRACE   shift and go to state 37

    block                          shift and go to state 192

state 188

    (52) statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .

    IF_KW           reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    WHILE_KW        reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    FOR_KW          reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    SWITCH_KW       reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    RETURN_KW       reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    BREAK_KW        reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    CONTINUE_KW     reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    READ_KW         reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    WRITE_KW        reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    SEMICOLON       reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    ID              reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    CALLOUT_KW      reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    OPENING_BRACE   reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    CLOSING_BRACE   reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    CASE_KW         reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)
    DEFAULT_KW      reduce using rule 52 (statement -> SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON .)


state 189

    (60) case_statements -> CASE_KW constant COLON . statement case_statements
    (46) statement -> . assignment SEMICOLON
    (47) statement -> . method_call SEMICOLON
    (48) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block SEMICOLON
    (49) statement -> . IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON
    (50) statement -> . WHILE_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES block SEMICOLON
    (51) statement -> . FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON
    (52) statement -> . SWITCH_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES OPENING_BRACE case_statements CLOSING_BRACE SEMICOLON
    (53) statement -> . RETURN_KW return_expr SEMICOLON
    (54) statement -> . BREAK_KW SEMICOLON
    (55) statement -> . CONTINUE_KW SEMICOLON
    (56) statement -> . block
    (57) statement -> . READ_KW OPENING_PARENTHESES ID CLOSING_PARENTHESES SEMICOLON
    (58) statement -> . WRITE_KW OPENING_PARENTHESES write_parameter CLOSING_PARENTHESES SEMICOLON
    (59) statement -> . SEMICOLON
    (65) assignment -> . location EXP expr
    (66) assignment -> . location
    (12) method_call -> . ID OPENING_PARENTHESES actual_parameters CLOSING_PARENTHESES
    (13) method_call -> . CALLOUT_KW OPENING_PARENTHESES STRING_CONSTANT callout_parameters CLOSING_PARENTHESES
    (38) block -> . OPENING_BRACE var_decl_list statement_list CLOSING_BRACE
    (69) location -> . ID
    (70) location -> . ID OPENING_BRACKET expr CLOSING_BRACKET

    IF_KW           shift and go to state 48
    WHILE_KW        shift and go to state 50
    FOR_KW          shift and go to state 51
    SWITCH_KW       shift and go to state 52
    RETURN_KW       shift and go to state 54
    BREAK_KW        shift and go to state 55
    CONTINUE_KW     shift and go to state 56
    READ_KW         shift and go to state 57
    WRITE_KW        shift and go to state 58
    SEMICOLON       shift and go to state 46
    ID              shift and go to state 53
    CALLOUT_KW      shift and go to state 60
    OPENING_BRACE   shift and go to state 37

    statement                      shift and go to state 193
    assignment                     shift and go to state 45
    method_call                    shift and go to state 47
    block                          shift and go to state 49
    location                       shift and go to state 59

state 190

    (61) case_statements -> DEFAULT_KW COLON statement .

    CLOSING_BRACE   reduce using rule 61 (case_statements -> DEFAULT_KW COLON statement .)


state 191

    (49) statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .

    IF_KW           reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    WHILE_KW        reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    FOR_KW          reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    SWITCH_KW       reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    RETURN_KW       reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    BREAK_KW        reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    CONTINUE_KW     reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    READ_KW         reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    WRITE_KW        reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    SEMICOLON       reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    ID              reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    CALLOUT_KW      reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    OPENING_BRACE   reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    CLOSING_BRACE   reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    CASE_KW         reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)
    DEFAULT_KW      reduce using rule 49 (statement -> IF_KW OPENING_PARENTHESES expr CLOSING_PARENTHESES THEN_KW block ELSE_KW block SEMICOLON .)


state 192

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block . SEMICOLON

    SEMICOLON       shift and go to state 194


state 193

    (60) case_statements -> CASE_KW constant COLON statement . case_statements
    (60) case_statements -> . CASE_KW constant COLON statement case_statements
    (61) case_statements -> . DEFAULT_KW COLON statement
    (62) case_statements -> .

    CASE_KW         shift and go to state 176
    DEFAULT_KW      shift and go to state 177
    CLOSING_BRACE   reduce using rule 62 (case_statements -> .)

    case_statements                shift and go to state 195

state 194

    (51) statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .

    IF_KW           reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    WHILE_KW        reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    FOR_KW          reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    SWITCH_KW       reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    RETURN_KW       reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    BREAK_KW        reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    CONTINUE_KW     reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    READ_KW         reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    WRITE_KW        reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    SEMICOLON       reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    ID              reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    CALLOUT_KW      reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    OPENING_BRACE   reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    CLOSING_BRACE   reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    CASE_KW         reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)
    DEFAULT_KW      reduce using rule 51 (statement -> FOR_KW OPENING_PARENTHESES for_initialize SEMICOLON expr SEMICOLON assignment CLOSING_PARENTHESES block SEMICOLON .)


state 195

    (60) case_statements -> CASE_KW constant COLON statement case_statements .

    CLOSING_BRACE   reduce using rule 60 (case_statements -> CASE_KW constant COLON statement case_statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT_KW in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT_KW in state 4 resolved as shift
WARNING: shift/reduce conflict for CHAR_KW in state 4 resolved as shift
WARNING: shift/reduce conflict for BOOL_KW in state 4 resolved as shift
WARNING: shift/reduce conflict for INT_KW in state 6 resolved as shift
WARNING: shift/reduce conflict for FLOAT_KW in state 6 resolved as shift
WARNING: shift/reduce conflict for CHAR_KW in state 6 resolved as shift
WARNING: shift/reduce conflict for BOOL_KW in state 6 resolved as shift
WARNING: shift/reduce conflict for LT in state 125 resolved as shift
WARNING: shift/reduce conflict for LE in state 125 resolved as shift
WARNING: shift/reduce conflict for GT in state 125 resolved as shift
WARNING: shift/reduce conflict for GE in state 125 resolved as shift
WARNING: shift/reduce conflict for EQ in state 125 resolved as shift
WARNING: shift/reduce conflict for NE in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for AND_THEN in state 125 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for DIV in state 125 resolved as shift
WARNING: shift/reduce conflict for REM in state 125 resolved as shift
WARNING: shift/reduce conflict for LT in state 126 resolved as shift
WARNING: shift/reduce conflict for LE in state 126 resolved as shift
WARNING: shift/reduce conflict for GT in state 126 resolved as shift
WARNING: shift/reduce conflict for GE in state 126 resolved as shift
WARNING: shift/reduce conflict for EQ in state 126 resolved as shift
WARNING: shift/reduce conflict for NE in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for AND_THEN in state 126 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for REM in state 126 resolved as shift
WARNING: shift/reduce conflict for LT in state 147 resolved as shift
WARNING: shift/reduce conflict for LE in state 147 resolved as shift
WARNING: shift/reduce conflict for GT in state 147 resolved as shift
WARNING: shift/reduce conflict for GE in state 147 resolved as shift
WARNING: shift/reduce conflict for EQ in state 147 resolved as shift
WARNING: shift/reduce conflict for NE in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for AND_THEN in state 147 resolved as shift
WARNING: shift/reduce conflict for OR_ELSE in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for DIV in state 147 resolved as shift
WARNING: shift/reduce conflict for REM in state 147 resolved as shift
